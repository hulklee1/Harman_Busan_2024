
test008-PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004350  08004350  00005350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044bc  080044bc  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080044bc  080044bc  000054bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044c4  080044c4  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c4  080044c4  000054c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044c8  080044c8  000054c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080044cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08004534  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004534  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9c3  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3b  00000000  00000000  00012a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00014798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b9  00000000  00000000  00015410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ac  00000000  00000000  00015dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e16b  00000000  00000000  0002ce75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fccc  00000000  00000000  0003afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cacac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c00  00000000  00000000  000cacf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ce8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004338 	.word	0x08004338

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004338 	.word	0x08004338

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b0ba      	sub	sp, #232	@ 0xe8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fcf3 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f869 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 fa1d 	bl	80009bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f9f1 	bl	8000968 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000586:	f000 f8cd 	bl	8000724 <MX_TIM1_Init>
  MX_TIM2_Init();
 800058a:	f000 f977 	bl	800087c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  ProgramStart(); //
 800058e:	f000 fa9b 	bl	8000ac8 <ProgramStart>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000592:	2100      	movs	r1, #0
 8000594:	4829      	ldr	r0, [pc, #164]	@ (800063c <main+0xcc>)
 8000596:	f001 fd55 	bl	8002044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800059a:	2104      	movs	r1, #4
 800059c:	4827      	ldr	r0, [pc, #156]	@ (800063c <main+0xcc>)
 800059e:	f001 fd51 	bl	8002044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80005a2:	2108      	movs	r1, #8
 80005a4:	4826      	ldr	r0, [pc, #152]	@ (8000640 <main+0xd0>)
 80005a6:	f001 fd4d 	bl	8002044 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //              DO  RE  MI  FA  SL  LA  SI  DO
  int freq[] = { 320,285,254,240,214,190,170,160};
 80005aa:	4b26      	ldr	r3, [pc, #152]	@ (8000644 <main+0xd4>)
 80005ac:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  enum { DO=320, RE=285, MI=254, FA=240, SL=214, LA=190, SI=170, DO1=160};
  //int freq[] = { 262,294,330,349,392,440,494,523};
  //int fre1[] = { 274,311,370,415,466};  // Half
  int song1[] = {SL,SL,LA,LA,SL,SL,MI,SL,SL,MI,MI,RE,
 80005be:	4a22      	ldr	r2, [pc, #136]	@ (8000648 <main+0xd8>)
 80005c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005c4:	4611      	mov	r1, r2
 80005c6:	2260      	movs	r2, #96	@ 0x60
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 f99e 	bl	800390a <memcpy>
		  SL,SL,LA,LA,SL,SL,MI,SL,MI,RE,MI,DO};// School Bell
  int ryth[]  = { 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 1,
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <main+0xdc>)
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4611      	mov	r1, r2
 80005d4:	2260      	movs	r2, #96	@ 0x60
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 f997 	bl	800390a <memcpy>
		   4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 1};

  while (1)
  {
	Wait(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fa8d 	bl	8000afc <Wait>
	{
		htim1.Instance->CCR1 = i;
		htim1.Instance->CCR2 = 990-i;
		HAL_Delay(3);
	}*/
	for(int i = 0;i<24;i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80005e8:	e023      	b.n	8000632 <main+0xc2>
	{
		htim2.Instance->PSC = song1[i];
 80005ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	33e8      	adds	r3, #232	@ 0xe8
 80005f2:	443b      	add	r3, r7
 80005f4:	f853 2c84 	ldr.w	r2, [r3, #-132]
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <main+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(2000/ryth[i]);
 80005fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	33e8      	adds	r3, #232	@ 0xe8
 8000606:	443b      	add	r3, r7
 8000608:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800060c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000610:	fb92 f3f3 	sdiv	r3, r2, r3
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fd15 	bl	8001044 <HAL_Delay>
		htim2.Instance->PSC = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <main+0xd0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2200      	movs	r2, #0
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(5);
 8000622:	2005      	movs	r0, #5
 8000624:	f000 fd0e 	bl	8001044 <HAL_Delay>
	for(int i = 0;i<24;i++)
 8000628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800062c:	3301      	adds	r3, #1
 800062e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000636:	2b17      	cmp	r3, #23
 8000638:	ddd7      	ble.n	80005ea <main+0x7a>
	Wait(1);
 800063a:	e7cf      	b.n	80005dc <main+0x6c>
 800063c:	20000084 	.word	0x20000084
 8000640:	200000cc 	.word	0x200000cc
 8000644:	08004350 	.word	0x08004350
 8000648:	08004370 	.word	0x08004370
 800064c:	080043d0 	.word	0x080043d0

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 f8d8 	bl	8003814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 ff74 	bl	80015c4 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f9d9 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f9d6 	bl	8001ab4 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9c3 	bl	8000a98 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b096      	sub	sp, #88	@ 0x58
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2220      	movs	r2, #32
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f003 f859 	bl	8003814 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000762:	4b44      	ldr	r3, [pc, #272]	@ (8000874 <MX_TIM1_Init+0x150>)
 8000764:	4a44      	ldr	r2, [pc, #272]	@ (8000878 <MX_TIM1_Init+0x154>)
 8000766:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000768:	4b42      	ldr	r3, [pc, #264]	@ (8000874 <MX_TIM1_Init+0x150>)
 800076a:	2253      	movs	r2, #83	@ 0x53
 800076c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b41      	ldr	r3, [pc, #260]	@ (8000874 <MX_TIM1_Init+0x150>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000774:	4b3f      	ldr	r3, [pc, #252]	@ (8000874 <MX_TIM1_Init+0x150>)
 8000776:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800077a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b3d      	ldr	r3, [pc, #244]	@ (8000874 <MX_TIM1_Init+0x150>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000782:	4b3c      	ldr	r3, [pc, #240]	@ (8000874 <MX_TIM1_Init+0x150>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b3a      	ldr	r3, [pc, #232]	@ (8000874 <MX_TIM1_Init+0x150>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800078e:	4839      	ldr	r0, [pc, #228]	@ (8000874 <MX_TIM1_Init+0x150>)
 8000790:	f001 fbb0 	bl	8001ef4 <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800079a:	f000 f97d 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007a8:	4619      	mov	r1, r3
 80007aa:	4832      	ldr	r0, [pc, #200]	@ (8000874 <MX_TIM1_Init+0x150>)
 80007ac:	f001 fdbc 	bl	8002328 <HAL_TIM_ConfigClockSource>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007b6:	f000 f96f 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ba:	482e      	ldr	r0, [pc, #184]	@ (8000874 <MX_TIM1_Init+0x150>)
 80007bc:	f001 fbe9 	bl	8001f92 <HAL_TIM_PWM_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007c6:	f000 f967 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007d6:	4619      	mov	r1, r3
 80007d8:	4826      	ldr	r0, [pc, #152]	@ (8000874 <MX_TIM1_Init+0x150>)
 80007da:	f002 f945 	bl	8002a68 <HAL_TIMEx_MasterConfigSynchronization>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007e4:	f000 f958 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e8:	2360      	movs	r3, #96	@ 0x60
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007f4:	2300      	movs	r3, #0
 80007f6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	4819      	ldr	r0, [pc, #100]	@ (8000874 <MX_TIM1_Init+0x150>)
 800080e:	f001 fcc9 	bl	80021a4 <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000818:	f000 f93e 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800081c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000820:	2204      	movs	r2, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4813      	ldr	r0, [pc, #76]	@ (8000874 <MX_TIM1_Init+0x150>)
 8000826:	f001 fcbd 	bl	80021a4 <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000830:	f000 f932 	bl	8000a98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000848:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4807      	ldr	r0, [pc, #28]	@ (8000874 <MX_TIM1_Init+0x150>)
 8000858:	f002 f974 	bl	8002b44 <HAL_TIMEx_ConfigBreakDeadTime>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000862:	f000 f919 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000866:	4803      	ldr	r0, [pc, #12]	@ (8000874 <MX_TIM1_Init+0x150>)
 8000868:	f000 f9c2 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 800086c:	bf00      	nop
 800086e:	3758      	adds	r7, #88	@ 0x58
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000084 	.word	0x20000084
 8000878:	40010000 	.word	0x40010000

0800087c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08e      	sub	sp, #56	@ 0x38
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
 80008a8:	615a      	str	r2, [r3, #20]
 80008aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <MX_TIM2_Init+0xe8>)
 80008ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000964 <MX_TIM2_Init+0xe8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000964 <MX_TIM2_Init+0xe8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80008c0:	4b28      	ldr	r3, [pc, #160]	@ (8000964 <MX_TIM2_Init+0xe8>)
 80008c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b26      	ldr	r3, [pc, #152]	@ (8000964 <MX_TIM2_Init+0xe8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b25      	ldr	r3, [pc, #148]	@ (8000964 <MX_TIM2_Init+0xe8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d4:	4823      	ldr	r0, [pc, #140]	@ (8000964 <MX_TIM2_Init+0xe8>)
 80008d6:	f001 fb0d 	bl	8001ef4 <HAL_TIM_Base_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008e0:	f000 f8da 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ee:	4619      	mov	r1, r3
 80008f0:	481c      	ldr	r0, [pc, #112]	@ (8000964 <MX_TIM2_Init+0xe8>)
 80008f2:	f001 fd19 	bl	8002328 <HAL_TIM_ConfigClockSource>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008fc:	f000 f8cc 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000900:	4818      	ldr	r0, [pc, #96]	@ (8000964 <MX_TIM2_Init+0xe8>)
 8000902:	f001 fb46 	bl	8001f92 <HAL_TIM_PWM_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800090c:	f000 f8c4 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4619      	mov	r1, r3
 800091e:	4811      	ldr	r0, [pc, #68]	@ (8000964 <MX_TIM2_Init+0xe8>)
 8000920:	f002 f8a2 	bl	8002a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800092a:	f000 f8b5 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092e:	2360      	movs	r3, #96	@ 0x60
 8000930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000932:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000936:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2208      	movs	r2, #8
 8000944:	4619      	mov	r1, r3
 8000946:	4807      	ldr	r0, [pc, #28]	@ (8000964 <MX_TIM2_Init+0xe8>)
 8000948:	f001 fc2c 	bl	80021a4 <HAL_TIM_PWM_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000952:	f000 f8a1 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000956:	4803      	ldr	r0, [pc, #12]	@ (8000964 <MX_TIM2_Init+0xe8>)
 8000958:	f000 f94a 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 800095c:	bf00      	nop
 800095e:	3738      	adds	r7, #56	@ 0x38
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000cc 	.word	0x200000cc

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	@ (80009b8 <MX_USART2_UART_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f002 f922 	bl	8002be8 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009aa:	f000 f875 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000114 	.word	0x20000114
 80009b8:	40004400 	.word	0x40004400

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a2c      	ldr	r2, [pc, #176]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a25      	ldr	r2, [pc, #148]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b23      	ldr	r3, [pc, #140]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a1e      	ldr	r2, [pc, #120]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a17      	ldr	r2, [pc, #92]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2120      	movs	r1, #32
 8000a46:	4812      	ldr	r0, [pc, #72]	@ (8000a90 <MX_GPIO_Init+0xd4>)
 8000a48:	f000 fda2 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <MX_GPIO_Init+0xd8>)
 8000a64:	f000 fbf8 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_GPIO_Init+0xd4>)
 8000a80:	f000 fbea 	bl	8001258 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	@ 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020800 	.word	0x40020800

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <__io_putchar>:
//extern ADC_HandleTypeDef hadc1;
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000aac:	1d39      	adds	r1, r7, #4
 8000aae:	230a      	movs	r3, #10
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <__io_putchar+0x20>)
 8000ab4:	f002 f8e8 	bl	8002c88 <HAL_UART_Transmit>
	return ch;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000114 	.word	0x20000114

08000ac8 <ProgramStart>:
	//HAL_ADC_PollForConversion(&hadc1, 10);
	//return HAL_ADC_GetValue(&hadc1);
}

void ProgramStart()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	printf("\033[2J");	// screen clear
 8000acc:	4808      	ldr	r0, [pc, #32]	@ (8000af0 <ProgramStart+0x28>)
 8000ace:	f002 fd59 	bl	8003584 <iprintf>
	printf("\033[1;1H");	// Move cursor pos to (1,1)
 8000ad2:	4808      	ldr	r0, [pc, #32]	@ (8000af4 <ProgramStart+0x2c>)
 8000ad4:	f002 fd56 	bl	8003584 <iprintf>
	printf("Program Started");
 8000ad8:	4807      	ldr	r0, [pc, #28]	@ (8000af8 <ProgramStart+0x30>)
 8000ada:	f002 fd53 	bl	8003584 <iprintf>
	Wait(1);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 f80c 	bl	8000afc <Wait>
	printf("\033[2J");	// screen clear
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <ProgramStart+0x28>)
 8000ae6:	f002 fd4d 	bl	8003584 <iprintf>
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	08004430 	.word	0x08004430
 8000af4:	08004438 	.word	0x08004438
 8000af8:	08004440 	.word	0x08004440

08000afc <Wait>:

void Wait(int o)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	if(o) printf("Press Blue button to continue\r\n");
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <Wait+0x14>
 8000b0a:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <Wait+0x30>)
 8000b0c:	f002 fda2 	bl	8003654 <puts>
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 8000b10:	bf00      	nop
 8000b12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <Wait+0x34>)
 8000b18:	f000 fd22 	bl	8001560 <HAL_GPIO_ReadPin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1f7      	bne.n	8000b12 <Wait+0x16>
}
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	08004450 	.word	0x08004450
 8000b30:	40020800 	.word	0x40020800

08000b34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b72:	2007      	movs	r0, #7
 8000b74:	f000 fb3c 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a15      	ldr	r2, [pc, #84]	@ (8000be8 <HAL_TIM_Base_MspInit+0x64>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d10e      	bne.n	8000bb4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <HAL_TIM_Base_MspInit+0x68>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	4a13      	ldr	r2, [pc, #76]	@ (8000bec <HAL_TIM_Base_MspInit+0x68>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <HAL_TIM_Base_MspInit+0x68>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bb2:	e012      	b.n	8000bda <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bbc:	d10d      	bne.n	8000bda <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_TIM_Base_MspInit+0x68>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <HAL_TIM_Base_MspInit+0x68>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <HAL_TIM_Base_MspInit+0x68>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40010000 	.word	0x40010000
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	@ 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a25      	ldr	r2, [pc, #148]	@ (8000ca4 <HAL_TIM_MspPostInit+0xb4>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d11f      	bne.n	8000c52 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b24      	ldr	r3, [pc, #144]	@ (8000ca8 <HAL_TIM_MspPostInit+0xb8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ca8 <HAL_TIM_MspPostInit+0xb8>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b21      	ldr	r3, [pc, #132]	@ (8000ca8 <HAL_TIM_MspPostInit+0xb8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4818      	ldr	r0, [pc, #96]	@ (8000cac <HAL_TIM_MspPostInit+0xbc>)
 8000c4c:	f000 fb04 	bl	8001258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c50:	e023      	b.n	8000c9a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c5a:	d11e      	bne.n	8000c9a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <HAL_TIM_MspPostInit+0xb8>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c64:	4a10      	ldr	r2, [pc, #64]	@ (8000ca8 <HAL_TIM_MspPostInit+0xb8>)
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <HAL_TIM_MspPostInit+0xb8>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4806      	ldr	r0, [pc, #24]	@ (8000cb0 <HAL_TIM_MspPostInit+0xc0>)
 8000c96:	f000 fadf 	bl	8001258 <HAL_GPIO_Init>
}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	@ 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40010000 	.word	0x40010000
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	@ (8000d38 <HAL_UART_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <HAL_UART_MspInit+0x8c>)
 8000d2a:	f000 fa95 	bl	8001258 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	@ 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40004400 	.word	0x40004400
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <NMI_Handler+0x4>

08000d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9a:	f000 f933 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e00a      	b.n	8000dca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000db4:	f3af 8000 	nop.w
 8000db8:	4601      	mov	r1, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	60ba      	str	r2, [r7, #8]
 8000dc0:	b2ca      	uxtb	r2, r1
 8000dc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	dbf0      	blt.n	8000db4 <_read+0x12>
  }

  return len;
 8000dd2:	687b      	ldr	r3, [r7, #4]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e009      	b.n	8000e02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	60ba      	str	r2, [r7, #8]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fe54 	bl	8000aa4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbf1      	blt.n	8000dee <_write+0x12>
  }
  return len;
 8000e0a:	687b      	ldr	r3, [r7, #4]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_close>:

int _close(int file)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e3c:	605a      	str	r2, [r3, #4]
  return 0;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_isatty>:

int _isatty(int file)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e54:	2301      	movs	r3, #1
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f002 fd00 	bl	80038b0 <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20020000 	.word	0x20020000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	2000015c 	.word	0x2000015c
 8000ee4:	200002b0 	.word	0x200002b0

08000ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f10:	f7ff ffea 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f16:	490d      	ldr	r1, [pc, #52]	@ (8000f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f18:	4a0d      	ldr	r2, [pc, #52]	@ (8000f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f002 fcbf 	bl	80038bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fb17 	bl	8000570 <main>
  bx  lr    
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f50:	080044cc 	.word	0x080044cc
  ldr r2, =_sbss
 8000f54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f58:	200002b0 	.word	0x200002b0

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <HAL_Init+0x40>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f70:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <HAL_Init+0x40>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <HAL_Init+0x40>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f931 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fdce 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023c00 	.word	0x40023c00

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f93b 	bl	800123e <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 f911 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008
 8001028:	20000160 	.word	0x20000160

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000160 	.word	0x20000160

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <HAL_Delay+0x44>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffde 	bl	800102c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	@ (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	@ (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	@ 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	@ 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff47 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff5c 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffb0 	bl	80011ac <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	e159      	b.n	8001528 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 8148 	bne.w	8001522 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d005      	beq.n	80012aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d130      	bne.n	800130c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 0201 	and.w	r2, r3, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b03      	cmp	r3, #3
 8001316:	d017      	beq.n	8001348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d123      	bne.n	800139c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80a2 	beq.w	8001522 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b57      	ldr	r3, [pc, #348]	@ (8001540 <HAL_GPIO_Init+0x2e8>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	4a56      	ldr	r2, [pc, #344]	@ (8001540 <HAL_GPIO_Init+0x2e8>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ee:	4b54      	ldr	r3, [pc, #336]	@ (8001540 <HAL_GPIO_Init+0x2e8>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fa:	4a52      	ldr	r2, [pc, #328]	@ (8001544 <HAL_GPIO_Init+0x2ec>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a49      	ldr	r2, [pc, #292]	@ (8001548 <HAL_GPIO_Init+0x2f0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d019      	beq.n	800145a <HAL_GPIO_Init+0x202>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a48      	ldr	r2, [pc, #288]	@ (800154c <HAL_GPIO_Init+0x2f4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0x1fe>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a47      	ldr	r2, [pc, #284]	@ (8001550 <HAL_GPIO_Init+0x2f8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00d      	beq.n	8001452 <HAL_GPIO_Init+0x1fa>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a46      	ldr	r2, [pc, #280]	@ (8001554 <HAL_GPIO_Init+0x2fc>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d007      	beq.n	800144e <HAL_GPIO_Init+0x1f6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a45      	ldr	r2, [pc, #276]	@ (8001558 <HAL_GPIO_Init+0x300>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_GPIO_Init+0x1f2>
 8001446:	2304      	movs	r3, #4
 8001448:	e008      	b.n	800145c <HAL_GPIO_Init+0x204>
 800144a:	2307      	movs	r3, #7
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x204>
 800144e:	2303      	movs	r3, #3
 8001450:	e004      	b.n	800145c <HAL_GPIO_Init+0x204>
 8001452:	2302      	movs	r3, #2
 8001454:	e002      	b.n	800145c <HAL_GPIO_Init+0x204>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <HAL_GPIO_Init+0x204>
 800145a:	2300      	movs	r3, #0
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	f002 0203 	and.w	r2, r2, #3
 8001462:	0092      	lsls	r2, r2, #2
 8001464:	4093      	lsls	r3, r2
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800146c:	4935      	ldr	r1, [pc, #212]	@ (8001544 <HAL_GPIO_Init+0x2ec>)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800147a:	4b38      	ldr	r3, [pc, #224]	@ (800155c <HAL_GPIO_Init+0x304>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149e:	4a2f      	ldr	r2, [pc, #188]	@ (800155c <HAL_GPIO_Init+0x304>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a4:	4b2d      	ldr	r3, [pc, #180]	@ (800155c <HAL_GPIO_Init+0x304>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c8:	4a24      	ldr	r2, [pc, #144]	@ (800155c <HAL_GPIO_Init+0x304>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ce:	4b23      	ldr	r3, [pc, #140]	@ (800155c <HAL_GPIO_Init+0x304>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014f2:	4a1a      	ldr	r2, [pc, #104]	@ (800155c <HAL_GPIO_Init+0x304>)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f8:	4b18      	ldr	r3, [pc, #96]	@ (800155c <HAL_GPIO_Init+0x304>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800151c:	4a0f      	ldr	r2, [pc, #60]	@ (800155c <HAL_GPIO_Init+0x304>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3301      	adds	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	2b0f      	cmp	r3, #15
 800152c:	f67f aea2 	bls.w	8001274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3724      	adds	r7, #36	@ 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40013800 	.word	0x40013800
 8001548:	40020000 	.word	0x40020000
 800154c:	40020400 	.word	0x40020400
 8001550:	40020800 	.word	0x40020800
 8001554:	40020c00 	.word	0x40020c00
 8001558:	40021000 	.word	0x40021000
 800155c:	40013c00 	.word	0x40013c00

08001560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e001      	b.n	8001582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e267      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d075      	beq.n	80016ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e2:	4b88      	ldr	r3, [pc, #544]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d00c      	beq.n	8001608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ee:	4b85      	ldr	r3, [pc, #532]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d112      	bne.n	8001620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fa:	4b82      	ldr	r3, [pc, #520]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001606:	d10b      	bne.n	8001620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	4b7e      	ldr	r3, [pc, #504]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d05b      	beq.n	80016cc <HAL_RCC_OscConfig+0x108>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d157      	bne.n	80016cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e242      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x74>
 800162a:	4b76      	ldr	r3, [pc, #472]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a75      	ldr	r2, [pc, #468]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0xb0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x98>
 8001642:	4b70      	ldr	r3, [pc, #448]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a6f      	ldr	r2, [pc, #444]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b6d      	ldr	r3, [pc, #436]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a6c      	ldr	r2, [pc, #432]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0xb0>
 800165c:	4b69      	ldr	r3, [pc, #420]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a68      	ldr	r2, [pc, #416]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b66      	ldr	r3, [pc, #408]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a65      	ldr	r2, [pc, #404]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fcd6 	bl	800102c <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fcd2 	bl	800102c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	@ 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e207      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b5b      	ldr	r3, [pc, #364]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0xc0>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fcc2 	bl	800102c <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fcbe 	bl	800102c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1f3      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	4b51      	ldr	r3, [pc, #324]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0xe8>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d063      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016da:	4b4a      	ldr	r3, [pc, #296]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00b      	beq.n	80016fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e6:	4b47      	ldr	r3, [pc, #284]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d11c      	bne.n	800172c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f2:	4b44      	ldr	r3, [pc, #272]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d116      	bne.n	800172c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	4b41      	ldr	r3, [pc, #260]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <HAL_RCC_OscConfig+0x152>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d001      	beq.n	8001716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e1c7      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001716:	4b3b      	ldr	r3, [pc, #236]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4937      	ldr	r1, [pc, #220]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	e03a      	b.n	80017a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <HAL_RCC_OscConfig+0x244>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff fc77 	bl	800102c <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001742:	f7ff fc73 	bl	800102c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e1a8      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	4b2b      	ldr	r3, [pc, #172]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b28      	ldr	r3, [pc, #160]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4925      	ldr	r1, [pc, #148]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
 8001774:	e015      	b.n	80017a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001776:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <HAL_RCC_OscConfig+0x244>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fc56 	bl	800102c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fc52 	bl	800102c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e187      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d036      	beq.n	800181c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d016      	beq.n	80017e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_RCC_OscConfig+0x248>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff fc36 	bl	800102c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff fc32 	bl	800102c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e167      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <HAL_RCC_OscConfig+0x240>)
 80017d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x200>
 80017e2:	e01b      	b.n	800181c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_RCC_OscConfig+0x248>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fc1f 	bl	800102c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	e00e      	b.n	8001810 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f2:	f7ff fc1b 	bl	800102c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d907      	bls.n	8001810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e150      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
 8001804:	40023800 	.word	0x40023800
 8001808:	42470000 	.word	0x42470000
 800180c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	4b88      	ldr	r3, [pc, #544]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ea      	bne.n	80017f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8097 	beq.w	8001958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182e:	4b81      	ldr	r3, [pc, #516]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10f      	bne.n	800185a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a7c      	ldr	r2, [pc, #496]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001856:	2301      	movs	r3, #1
 8001858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185a:	4b77      	ldr	r3, [pc, #476]	@ (8001a38 <HAL_RCC_OscConfig+0x474>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d118      	bne.n	8001898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001866:	4b74      	ldr	r3, [pc, #464]	@ (8001a38 <HAL_RCC_OscConfig+0x474>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a73      	ldr	r2, [pc, #460]	@ (8001a38 <HAL_RCC_OscConfig+0x474>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001872:	f7ff fbdb 	bl	800102c <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187a:	f7ff fbd7 	bl	800102c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e10c      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a38 <HAL_RCC_OscConfig+0x474>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d106      	bne.n	80018ae <HAL_RCC_OscConfig+0x2ea>
 80018a0:	4b64      	ldr	r3, [pc, #400]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a4:	4a63      	ldr	r2, [pc, #396]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ac:	e01c      	b.n	80018e8 <HAL_RCC_OscConfig+0x324>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x30c>
 80018b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0x324>
 80018d0:	4b58      	ldr	r3, [pc, #352]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d4:	4a57      	ldr	r2, [pc, #348]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	6713      	str	r3, [r2, #112]	@ 0x70
 80018dc:	4b55      	ldr	r3, [pc, #340]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e0:	4a54      	ldr	r2, [pc, #336]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80018e2:	f023 0304 	bic.w	r3, r3, #4
 80018e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d015      	beq.n	800191c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f0:	f7ff fb9c 	bl	800102c <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	e00a      	b.n	800190e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7ff fb98 	bl	800102c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e0cb      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	4b49      	ldr	r3, [pc, #292]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0ee      	beq.n	80018f8 <HAL_RCC_OscConfig+0x334>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fb86 	bl	800102c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff fb82 	bl	800102c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0b5      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ee      	bne.n	8001924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b39      	ldr	r3, [pc, #228]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	4a38      	ldr	r2, [pc, #224]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001956:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a1 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001962:	4b34      	ldr	r3, [pc, #208]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b08      	cmp	r3, #8
 800196c:	d05c      	beq.n	8001a28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d141      	bne.n	80019fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <HAL_RCC_OscConfig+0x478>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fb56 	bl	800102c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff fb52 	bl	800102c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e087      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001996:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69da      	ldr	r2, [r3, #28]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	019b      	lsls	r3, r3, #6
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	3b01      	subs	r3, #1
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c4:	061b      	lsls	r3, r3, #24
 80019c6:	491b      	ldr	r1, [pc, #108]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <HAL_RCC_OscConfig+0x478>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fb2b 	bl	800102c <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019da:	f7ff fb27 	bl	800102c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e05c      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x416>
 80019f8:	e054      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <HAL_RCC_OscConfig+0x478>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7ff fb14 	bl	800102c <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff fb10 	bl	800102c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e045      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x444>
 8001a26:	e03d      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e038      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <HAL_RCC_OscConfig+0x4ec>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d028      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d121      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d11a      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a70:	4013      	ands	r3, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d111      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a86:	085b      	lsrs	r3, r3, #1
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0cc      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b68      	ldr	r3, [pc, #416]	@ (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d90c      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b65      	ldr	r3, [pc, #404]	@ (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b63      	ldr	r3, [pc, #396]	@ (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0b8      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b08:	4b59      	ldr	r3, [pc, #356]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4a58      	ldr	r2, [pc, #352]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b20:	4b53      	ldr	r3, [pc, #332]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a52      	ldr	r2, [pc, #328]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b50      	ldr	r3, [pc, #320]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	494d      	ldr	r1, [pc, #308]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d044      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b47      	ldr	r3, [pc, #284]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d119      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e07f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d003      	beq.n	8001b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	4b3f      	ldr	r3, [pc, #252]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e06f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	4b3b      	ldr	r3, [pc, #236]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e067      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b92:	4b37      	ldr	r3, [pc, #220]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f023 0203 	bic.w	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4934      	ldr	r1, [pc, #208]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba4:	f7ff fa42 	bl	800102c <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bac:	f7ff fa3e 	bl	800102c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e04f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 020c 	and.w	r2, r3, #12
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1eb      	bne.n	8001bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d20c      	bcs.n	8001bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e032      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c08:	4b19      	ldr	r3, [pc, #100]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4916      	ldr	r1, [pc, #88]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	490e      	ldr	r1, [pc, #56]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c3a:	f000 f821 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	490a      	ldr	r1, [pc, #40]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	5ccb      	ldrb	r3, [r1, r3]
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	4a09      	ldr	r2, [pc, #36]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f9a2 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023c00 	.word	0x40023c00
 8001c70:	40023800 	.word	0x40023800
 8001c74:	08004470 	.word	0x08004470
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c84:	b094      	sub	sp, #80	@ 0x50
 8001c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c90:	2300      	movs	r3, #0
 8001c92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c98:	4b79      	ldr	r3, [pc, #484]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	f200 80e1 	bhi.w	8001e6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0x3a>
 8001cb2:	e0db      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cb4:	4b73      	ldr	r3, [pc, #460]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001cb8:	e0db      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cba:	4b73      	ldr	r3, [pc, #460]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cbe:	e0d8      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cca:	4b6d      	ldr	r3, [pc, #436]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	2200      	movs	r2, #0
 8001cde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ce0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cea:	2300      	movs	r3, #0
 8001cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	462b      	mov	r3, r5
 8001cf6:	f04f 0000 	mov.w	r0, #0
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	0159      	lsls	r1, r3, #5
 8001d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d04:	0150      	lsls	r0, r2, #5
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	1a51      	subs	r1, r2, r1
 8001d0e:	6139      	str	r1, [r7, #16]
 8001d10:	4629      	mov	r1, r5
 8001d12:	eb63 0301 	sbc.w	r3, r3, r1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d24:	4659      	mov	r1, fp
 8001d26:	018b      	lsls	r3, r1, #6
 8001d28:	4651      	mov	r1, sl
 8001d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d2e:	4651      	mov	r1, sl
 8001d30:	018a      	lsls	r2, r1, #6
 8001d32:	4651      	mov	r1, sl
 8001d34:	ebb2 0801 	subs.w	r8, r2, r1
 8001d38:	4659      	mov	r1, fp
 8001d3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d52:	4690      	mov	r8, r2
 8001d54:	4699      	mov	r9, r3
 8001d56:	4623      	mov	r3, r4
 8001d58:	eb18 0303 	adds.w	r3, r8, r3
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	462b      	mov	r3, r5
 8001d60:	eb49 0303 	adc.w	r3, r9, r3
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d72:	4629      	mov	r1, r5
 8001d74:	024b      	lsls	r3, r1, #9
 8001d76:	4621      	mov	r1, r4
 8001d78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	024a      	lsls	r2, r1, #9
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d86:	2200      	movs	r2, #0
 8001d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d90:	f7fe fa76 	bl	8000280 <__aeabi_uldivmod>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4613      	mov	r3, r2
 8001d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d9c:	e058      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9e:	4b38      	ldr	r3, [pc, #224]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	2200      	movs	r2, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	4611      	mov	r1, r2
 8001daa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dae:	623b      	str	r3, [r7, #32]
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001db8:	4642      	mov	r2, r8
 8001dba:	464b      	mov	r3, r9
 8001dbc:	f04f 0000 	mov.w	r0, #0
 8001dc0:	f04f 0100 	mov.w	r1, #0
 8001dc4:	0159      	lsls	r1, r3, #5
 8001dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dca:	0150      	lsls	r0, r2, #5
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4641      	mov	r1, r8
 8001dd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dd6:	4649      	mov	r1, r9
 8001dd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001de8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001df0:	ebb2 040a 	subs.w	r4, r2, sl
 8001df4:	eb63 050b 	sbc.w	r5, r3, fp
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	00eb      	lsls	r3, r5, #3
 8001e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e06:	00e2      	lsls	r2, r4, #3
 8001e08:	4614      	mov	r4, r2
 8001e0a:	461d      	mov	r5, r3
 8001e0c:	4643      	mov	r3, r8
 8001e0e:	18e3      	adds	r3, r4, r3
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	464b      	mov	r3, r9
 8001e14:	eb45 0303 	adc.w	r3, r5, r3
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e26:	4629      	mov	r1, r5
 8001e28:	028b      	lsls	r3, r1, #10
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e30:	4621      	mov	r1, r4
 8001e32:	028a      	lsls	r2, r1, #10
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	61fa      	str	r2, [r7, #28]
 8001e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e44:	f7fe fa1c 	bl	8000280 <__aeabi_uldivmod>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001e60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e6a:	e002      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3750      	adds	r7, #80	@ 0x50
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	00f42400 	.word	0x00f42400
 8001e88:	007a1200 	.word	0x007a1200

08001e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ea8:	f7ff fff0 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0a9b      	lsrs	r3, r3, #10
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	@ (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	08004480 	.word	0x08004480

08001ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ed0:	f7ff ffdc 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0b5b      	lsrs	r3, r3, #13
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	@ (8001ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	08004480 	.word	0x08004480

08001ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e041      	b.n	8001f8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fe32 	bl	8000b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f000 fac0 	bl	80024b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e041      	b.n	8002028 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f839 	bl	8002030 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	f000 fa71 	bl	80024b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d109      	bne.n	8002068 <HAL_TIM_PWM_Start+0x24>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	bf14      	ite	ne
 8002060:	2301      	movne	r3, #1
 8002062:	2300      	moveq	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	e022      	b.n	80020ae <HAL_TIM_PWM_Start+0x6a>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b04      	cmp	r3, #4
 800206c:	d109      	bne.n	8002082 <HAL_TIM_PWM_Start+0x3e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	bf14      	ite	ne
 800207a:	2301      	movne	r3, #1
 800207c:	2300      	moveq	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	e015      	b.n	80020ae <HAL_TIM_PWM_Start+0x6a>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d109      	bne.n	800209c <HAL_TIM_PWM_Start+0x58>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e008      	b.n	80020ae <HAL_TIM_PWM_Start+0x6a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e068      	b.n	8002188 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_PWM_Start+0x82>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020c4:	e013      	b.n	80020ee <HAL_TIM_PWM_Start+0xaa>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_PWM_Start+0x92>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020d4:	e00b      	b.n	80020ee <HAL_TIM_PWM_Start+0xaa>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d104      	bne.n	80020e6 <HAL_TIM_PWM_Start+0xa2>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020e4:	e003      	b.n	80020ee <HAL_TIM_PWM_Start+0xaa>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2201      	movs	r2, #1
 80020f4:	6839      	ldr	r1, [r7, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fc90 	bl	8002a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a23      	ldr	r2, [pc, #140]	@ (8002190 <HAL_TIM_PWM_Start+0x14c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d107      	bne.n	8002116 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1d      	ldr	r2, [pc, #116]	@ (8002190 <HAL_TIM_PWM_Start+0x14c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d018      	beq.n	8002152 <HAL_TIM_PWM_Start+0x10e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002128:	d013      	beq.n	8002152 <HAL_TIM_PWM_Start+0x10e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a19      	ldr	r2, [pc, #100]	@ (8002194 <HAL_TIM_PWM_Start+0x150>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00e      	beq.n	8002152 <HAL_TIM_PWM_Start+0x10e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a17      	ldr	r2, [pc, #92]	@ (8002198 <HAL_TIM_PWM_Start+0x154>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_TIM_PWM_Start+0x10e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a16      	ldr	r2, [pc, #88]	@ (800219c <HAL_TIM_PWM_Start+0x158>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d004      	beq.n	8002152 <HAL_TIM_PWM_Start+0x10e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <HAL_TIM_PWM_Start+0x15c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d111      	bne.n	8002176 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b06      	cmp	r3, #6
 8002162:	d010      	beq.n	8002186 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002174:	e007      	b.n	8002186 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0201 	orr.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40010000 	.word	0x40010000
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800
 800219c:	40000c00 	.word	0x40000c00
 80021a0:	40014000 	.word	0x40014000

080021a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021be:	2302      	movs	r3, #2
 80021c0:	e0ae      	b.n	8002320 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0c      	cmp	r3, #12
 80021ce:	f200 809f 	bhi.w	8002310 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021d2:	a201      	add	r2, pc, #4	@ (adr r2, 80021d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	0800220d 	.word	0x0800220d
 80021dc:	08002311 	.word	0x08002311
 80021e0:	08002311 	.word	0x08002311
 80021e4:	08002311 	.word	0x08002311
 80021e8:	0800224d 	.word	0x0800224d
 80021ec:	08002311 	.word	0x08002311
 80021f0:	08002311 	.word	0x08002311
 80021f4:	08002311 	.word	0x08002311
 80021f8:	0800228f 	.word	0x0800228f
 80021fc:	08002311 	.word	0x08002311
 8002200:	08002311 	.word	0x08002311
 8002204:	08002311 	.word	0x08002311
 8002208:	080022cf 	.word	0x080022cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f9dc 	bl	80025d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0208 	orr.w	r2, r2, #8
 8002226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0204 	bic.w	r2, r2, #4
 8002236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6999      	ldr	r1, [r3, #24]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	619a      	str	r2, [r3, #24]
      break;
 800224a:	e064      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fa22 	bl	800269c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6999      	ldr	r1, [r3, #24]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	021a      	lsls	r2, r3, #8
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	619a      	str	r2, [r3, #24]
      break;
 800228c:	e043      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fa6d 	bl	8002774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0208 	orr.w	r2, r2, #8
 80022a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0204 	bic.w	r2, r2, #4
 80022b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69d9      	ldr	r1, [r3, #28]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	61da      	str	r2, [r3, #28]
      break;
 80022cc:	e023      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fab7 	bl	8002848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69d9      	ldr	r1, [r3, #28]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	021a      	lsls	r2, r3, #8
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	61da      	str	r2, [r3, #28]
      break;
 800230e:	e002      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	75fb      	strb	r3, [r7, #23]
      break;
 8002314:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800231e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_TIM_ConfigClockSource+0x1c>
 8002340:	2302      	movs	r3, #2
 8002342:	e0b4      	b.n	80024ae <HAL_TIM_ConfigClockSource+0x186>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800236a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800237c:	d03e      	beq.n	80023fc <HAL_TIM_ConfigClockSource+0xd4>
 800237e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002382:	f200 8087 	bhi.w	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 8002386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800238a:	f000 8086 	beq.w	800249a <HAL_TIM_ConfigClockSource+0x172>
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002392:	d87f      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 8002394:	2b70      	cmp	r3, #112	@ 0x70
 8002396:	d01a      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0xa6>
 8002398:	2b70      	cmp	r3, #112	@ 0x70
 800239a:	d87b      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 800239c:	2b60      	cmp	r3, #96	@ 0x60
 800239e:	d050      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x11a>
 80023a0:	2b60      	cmp	r3, #96	@ 0x60
 80023a2:	d877      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023a4:	2b50      	cmp	r3, #80	@ 0x50
 80023a6:	d03c      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0xfa>
 80023a8:	2b50      	cmp	r3, #80	@ 0x50
 80023aa:	d873      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023ac:	2b40      	cmp	r3, #64	@ 0x40
 80023ae:	d058      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x13a>
 80023b0:	2b40      	cmp	r3, #64	@ 0x40
 80023b2:	d86f      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023b4:	2b30      	cmp	r3, #48	@ 0x30
 80023b6:	d064      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023b8:	2b30      	cmp	r3, #48	@ 0x30
 80023ba:	d86b      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d060      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d867      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05c      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d05a      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023cc:	e062      	b.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023de:	f000 fafd 	bl	80029dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80023f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	609a      	str	r2, [r3, #8]
      break;
 80023fa:	e04f      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800240c:	f000 fae6 	bl	80029dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800241e:	609a      	str	r2, [r3, #8]
      break;
 8002420:	e03c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242e:	461a      	mov	r2, r3
 8002430:	f000 fa5a 	bl	80028e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2150      	movs	r1, #80	@ 0x50
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fab3 	bl	80029a6 <TIM_ITRx_SetConfig>
      break;
 8002440:	e02c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800244e:	461a      	mov	r2, r3
 8002450:	f000 fa79 	bl	8002946 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2160      	movs	r1, #96	@ 0x60
 800245a:	4618      	mov	r0, r3
 800245c:	f000 faa3 	bl	80029a6 <TIM_ITRx_SetConfig>
      break;
 8002460:	e01c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800246e:	461a      	mov	r2, r3
 8002470:	f000 fa3a 	bl	80028e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2140      	movs	r1, #64	@ 0x40
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fa93 	bl	80029a6 <TIM_ITRx_SetConfig>
      break;
 8002480:	e00c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f000 fa8a 	bl	80029a6 <TIM_ITRx_SetConfig>
      break;
 8002492:	e003      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
      break;
 8002498:	e000      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800249a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a3a      	ldr	r2, [pc, #232]	@ (80025b4 <TIM_Base_SetConfig+0xfc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00f      	beq.n	80024f0 <TIM_Base_SetConfig+0x38>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d6:	d00b      	beq.n	80024f0 <TIM_Base_SetConfig+0x38>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a37      	ldr	r2, [pc, #220]	@ (80025b8 <TIM_Base_SetConfig+0x100>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d007      	beq.n	80024f0 <TIM_Base_SetConfig+0x38>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a36      	ldr	r2, [pc, #216]	@ (80025bc <TIM_Base_SetConfig+0x104>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <TIM_Base_SetConfig+0x38>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a35      	ldr	r2, [pc, #212]	@ (80025c0 <TIM_Base_SetConfig+0x108>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d108      	bne.n	8002502 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a2b      	ldr	r2, [pc, #172]	@ (80025b4 <TIM_Base_SetConfig+0xfc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01b      	beq.n	8002542 <TIM_Base_SetConfig+0x8a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002510:	d017      	beq.n	8002542 <TIM_Base_SetConfig+0x8a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a28      	ldr	r2, [pc, #160]	@ (80025b8 <TIM_Base_SetConfig+0x100>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <TIM_Base_SetConfig+0x8a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a27      	ldr	r2, [pc, #156]	@ (80025bc <TIM_Base_SetConfig+0x104>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00f      	beq.n	8002542 <TIM_Base_SetConfig+0x8a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a26      	ldr	r2, [pc, #152]	@ (80025c0 <TIM_Base_SetConfig+0x108>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00b      	beq.n	8002542 <TIM_Base_SetConfig+0x8a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a25      	ldr	r2, [pc, #148]	@ (80025c4 <TIM_Base_SetConfig+0x10c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d007      	beq.n	8002542 <TIM_Base_SetConfig+0x8a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a24      	ldr	r2, [pc, #144]	@ (80025c8 <TIM_Base_SetConfig+0x110>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d003      	beq.n	8002542 <TIM_Base_SetConfig+0x8a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a23      	ldr	r2, [pc, #140]	@ (80025cc <TIM_Base_SetConfig+0x114>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d108      	bne.n	8002554 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a0e      	ldr	r2, [pc, #56]	@ (80025b4 <TIM_Base_SetConfig+0xfc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d103      	bne.n	8002588 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d105      	bne.n	80025a6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f023 0201 	bic.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	611a      	str	r2, [r3, #16]
  }
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40010000 	.word	0x40010000
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40000800 	.word	0x40000800
 80025c0:	40000c00 	.word	0x40000c00
 80025c4:	40014000 	.word	0x40014000
 80025c8:	40014400 	.word	0x40014400
 80025cc:	40014800 	.word	0x40014800

080025d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f023 0201 	bic.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0303 	bic.w	r3, r3, #3
 8002606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f023 0302 	bic.w	r3, r3, #2
 8002618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a1c      	ldr	r2, [pc, #112]	@ (8002698 <TIM_OC1_SetConfig+0xc8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d10c      	bne.n	8002646 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f023 0308 	bic.w	r3, r3, #8
 8002632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a13      	ldr	r2, [pc, #76]	@ (8002698 <TIM_OC1_SetConfig+0xc8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d111      	bne.n	8002672 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800265c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	621a      	str	r2, [r3, #32]
}
 800268c:	bf00      	nop
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	40010000 	.word	0x40010000

0800269c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f023 0210 	bic.w	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0320 	bic.w	r3, r3, #32
 80026e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002770 <TIM_OC2_SetConfig+0xd4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d10d      	bne.n	8002718 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002716:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a15      	ldr	r2, [pc, #84]	@ (8002770 <TIM_OC2_SetConfig+0xd4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d113      	bne.n	8002748 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800272e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	621a      	str	r2, [r3, #32]
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40010000 	.word	0x40010000

08002774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0303 	bic.w	r3, r3, #3
 80027aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002844 <TIM_OC3_SetConfig+0xd0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d10d      	bne.n	80027ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a14      	ldr	r2, [pc, #80]	@ (8002844 <TIM_OC3_SetConfig+0xd0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d113      	bne.n	800281e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	621a      	str	r2, [r3, #32]
}
 8002838:	bf00      	nop
 800283a:	371c      	adds	r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40010000 	.word	0x40010000

08002848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800287e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	031b      	lsls	r3, r3, #12
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a10      	ldr	r2, [pc, #64]	@ (80028e4 <TIM_OC4_SetConfig+0x9c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d109      	bne.n	80028bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	019b      	lsls	r3, r3, #6
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	621a      	str	r2, [r3, #32]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40010000 	.word	0x40010000

080028e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	f023 0201 	bic.w	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f023 030a 	bic.w	r3, r3, #10
 8002924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	621a      	str	r2, [r3, #32]
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002946:	b480      	push	{r7}
 8002948:	b087      	sub	sp, #28
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f023 0210 	bic.w	r2, r3, #16
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002970:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	031b      	lsls	r3, r3, #12
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002982:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f043 0307 	orr.w	r3, r3, #7
 80029c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	609a      	str	r2, [r3, #8]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	021a      	lsls	r2, r3, #8
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	609a      	str	r2, [r3, #8]
}
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	2201      	movs	r2, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a1a      	ldr	r2, [r3, #32]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	401a      	ands	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a1a      	ldr	r2, [r3, #32]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	621a      	str	r2, [r3, #32]
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e050      	b.n	8002b22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1c      	ldr	r2, [pc, #112]	@ (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d018      	beq.n	8002af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002acc:	d013      	beq.n	8002af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a18      	ldr	r2, [pc, #96]	@ (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00e      	beq.n	8002af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a16      	ldr	r2, [pc, #88]	@ (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a15      	ldr	r2, [pc, #84]	@ (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a13      	ldr	r2, [pc, #76]	@ (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10c      	bne.n	8002b10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40010000 	.word	0x40010000
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40000800 	.word	0x40000800
 8002b3c:	40000c00 	.word	0x40000c00
 8002b40:	40014000 	.word	0x40014000

08002b44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e03d      	b.n	8002bdc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e042      	b.n	8002c80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe f850 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	@ 0x24
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f973 	bl	8002f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	@ 0x28
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d175      	bne.n	8002d94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_UART_Transmit+0x2c>
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e06e      	b.n	8002d96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2221      	movs	r2, #33	@ 0x21
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe f9b1 	bl	800102c <HAL_GetTick>
 8002cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	88fa      	ldrh	r2, [r7, #6]
 8002cd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	88fa      	ldrh	r2, [r7, #6]
 8002cd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce0:	d108      	bne.n	8002cf4 <HAL_UART_Transmit+0x6c>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d104      	bne.n	8002cf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	e003      	b.n	8002cfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cfc:	e02e      	b.n	8002d5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	2180      	movs	r1, #128	@ 0x80
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f848 	bl	8002d9e <UART_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e03a      	b.n	8002d96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	3302      	adds	r3, #2
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	e007      	b.n	8002d4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1cb      	bne.n	8002cfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2140      	movs	r1, #64	@ 0x40
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f814 	bl	8002d9e <UART_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e006      	b.n	8002d96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	4613      	mov	r3, r2
 8002dac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dae:	e03b      	b.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d037      	beq.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db8:	f7fe f938 	bl	800102c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d302      	bcc.n	8002dce <UART_WaitOnFlagUntilTimeout+0x30>
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e03a      	b.n	8002e48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d023      	beq.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b80      	cmp	r3, #128	@ 0x80
 8002de4:	d020      	beq.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d01d      	beq.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d116      	bne.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f81d 	bl	8002e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e00f      	b.n	8002e48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d0b4      	beq.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b095      	sub	sp, #84	@ 0x54
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e62:	e853 3f00 	ldrex	r3, [r3]
 8002e66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e78:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e5      	bne.n	8002e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3314      	adds	r3, #20
 8002e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002eac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d119      	bne.n	8002efc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	e853 3f00 	ldrex	r3, [r3]
 8002ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f023 0310 	bic.w	r3, r3, #16
 8002ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ee8:	61ba      	str	r2, [r7, #24]
 8002eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eec:	6979      	ldr	r1, [r7, #20]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	e841 2300 	strex	r3, r2, [r1]
 8002ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e5      	bne.n	8002ec8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f0a:	bf00      	nop
 8002f0c:	3754      	adds	r7, #84	@ 0x54
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f1c:	b0c0      	sub	sp, #256	@ 0x100
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f34:	68d9      	ldr	r1, [r3, #12]
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	ea40 0301 	orr.w	r3, r0, r1
 8002f40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f70:	f021 010c 	bic.w	r1, r1, #12
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f92:	6999      	ldr	r1, [r3, #24]
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	ea40 0301 	orr.w	r3, r0, r1
 8002f9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4b8f      	ldr	r3, [pc, #572]	@ (80031e4 <UART_SetConfig+0x2cc>)
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d005      	beq.n	8002fb8 <UART_SetConfig+0xa0>
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80031e8 <UART_SetConfig+0x2d0>)
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d104      	bne.n	8002fc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fb8:	f7fe ff88 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
 8002fbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002fc0:	e003      	b.n	8002fca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fc2:	f7fe ff6f 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8002fc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fd4:	f040 810c 	bne.w	80031f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fe2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002fe6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fea:	4622      	mov	r2, r4
 8002fec:	462b      	mov	r3, r5
 8002fee:	1891      	adds	r1, r2, r2
 8002ff0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ff2:	415b      	adcs	r3, r3
 8002ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ff6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	eb12 0801 	adds.w	r8, r2, r1
 8003000:	4629      	mov	r1, r5
 8003002:	eb43 0901 	adc.w	r9, r3, r1
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800301a:	4690      	mov	r8, r2
 800301c:	4699      	mov	r9, r3
 800301e:	4623      	mov	r3, r4
 8003020:	eb18 0303 	adds.w	r3, r8, r3
 8003024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003028:	462b      	mov	r3, r5
 800302a:	eb49 0303 	adc.w	r3, r9, r3
 800302e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800303e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003042:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003046:	460b      	mov	r3, r1
 8003048:	18db      	adds	r3, r3, r3
 800304a:	653b      	str	r3, [r7, #80]	@ 0x50
 800304c:	4613      	mov	r3, r2
 800304e:	eb42 0303 	adc.w	r3, r2, r3
 8003052:	657b      	str	r3, [r7, #84]	@ 0x54
 8003054:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003058:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800305c:	f7fd f910 	bl	8000280 <__aeabi_uldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4b61      	ldr	r3, [pc, #388]	@ (80031ec <UART_SetConfig+0x2d4>)
 8003066:	fba3 2302 	umull	r2, r3, r3, r2
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	011c      	lsls	r4, r3, #4
 800306e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003072:	2200      	movs	r2, #0
 8003074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003078:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800307c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003080:	4642      	mov	r2, r8
 8003082:	464b      	mov	r3, r9
 8003084:	1891      	adds	r1, r2, r2
 8003086:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003088:	415b      	adcs	r3, r3
 800308a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800308c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003090:	4641      	mov	r1, r8
 8003092:	eb12 0a01 	adds.w	sl, r2, r1
 8003096:	4649      	mov	r1, r9
 8003098:	eb43 0b01 	adc.w	fp, r3, r1
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030b0:	4692      	mov	sl, r2
 80030b2:	469b      	mov	fp, r3
 80030b4:	4643      	mov	r3, r8
 80030b6:	eb1a 0303 	adds.w	r3, sl, r3
 80030ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030be:	464b      	mov	r3, r9
 80030c0:	eb4b 0303 	adc.w	r3, fp, r3
 80030c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030dc:	460b      	mov	r3, r1
 80030de:	18db      	adds	r3, r3, r3
 80030e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80030e2:	4613      	mov	r3, r2
 80030e4:	eb42 0303 	adc.w	r3, r2, r3
 80030e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80030ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030f2:	f7fd f8c5 	bl	8000280 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	4b3b      	ldr	r3, [pc, #236]	@ (80031ec <UART_SetConfig+0x2d4>)
 80030fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2264      	movs	r2, #100	@ 0x64
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	1acb      	subs	r3, r1, r3
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003112:	4b36      	ldr	r3, [pc, #216]	@ (80031ec <UART_SetConfig+0x2d4>)
 8003114:	fba3 2302 	umull	r2, r3, r3, r2
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003120:	441c      	add	r4, r3
 8003122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003126:	2200      	movs	r2, #0
 8003128:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800312c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003130:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003134:	4642      	mov	r2, r8
 8003136:	464b      	mov	r3, r9
 8003138:	1891      	adds	r1, r2, r2
 800313a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800313c:	415b      	adcs	r3, r3
 800313e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003144:	4641      	mov	r1, r8
 8003146:	1851      	adds	r1, r2, r1
 8003148:	6339      	str	r1, [r7, #48]	@ 0x30
 800314a:	4649      	mov	r1, r9
 800314c:	414b      	adcs	r3, r1
 800314e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800315c:	4659      	mov	r1, fp
 800315e:	00cb      	lsls	r3, r1, #3
 8003160:	4651      	mov	r1, sl
 8003162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003166:	4651      	mov	r1, sl
 8003168:	00ca      	lsls	r2, r1, #3
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	4603      	mov	r3, r0
 8003170:	4642      	mov	r2, r8
 8003172:	189b      	adds	r3, r3, r2
 8003174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003178:	464b      	mov	r3, r9
 800317a:	460a      	mov	r2, r1
 800317c:	eb42 0303 	adc.w	r3, r2, r3
 8003180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003190:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003194:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003198:	460b      	mov	r3, r1
 800319a:	18db      	adds	r3, r3, r3
 800319c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800319e:	4613      	mov	r3, r2
 80031a0:	eb42 0303 	adc.w	r3, r2, r3
 80031a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80031ae:	f7fd f867 	bl	8000280 <__aeabi_uldivmod>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4b0d      	ldr	r3, [pc, #52]	@ (80031ec <UART_SetConfig+0x2d4>)
 80031b8:	fba3 1302 	umull	r1, r3, r3, r2
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	2164      	movs	r1, #100	@ 0x64
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	3332      	adds	r3, #50	@ 0x32
 80031ca:	4a08      	ldr	r2, [pc, #32]	@ (80031ec <UART_SetConfig+0x2d4>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	f003 0207 	and.w	r2, r3, #7
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4422      	add	r2, r4
 80031de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031e0:	e106      	b.n	80033f0 <UART_SetConfig+0x4d8>
 80031e2:	bf00      	nop
 80031e4:	40011000 	.word	0x40011000
 80031e8:	40011400 	.word	0x40011400
 80031ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003202:	4642      	mov	r2, r8
 8003204:	464b      	mov	r3, r9
 8003206:	1891      	adds	r1, r2, r2
 8003208:	6239      	str	r1, [r7, #32]
 800320a:	415b      	adcs	r3, r3
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
 800320e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003212:	4641      	mov	r1, r8
 8003214:	1854      	adds	r4, r2, r1
 8003216:	4649      	mov	r1, r9
 8003218:	eb43 0501 	adc.w	r5, r3, r1
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	00eb      	lsls	r3, r5, #3
 8003226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800322a:	00e2      	lsls	r2, r4, #3
 800322c:	4614      	mov	r4, r2
 800322e:	461d      	mov	r5, r3
 8003230:	4643      	mov	r3, r8
 8003232:	18e3      	adds	r3, r4, r3
 8003234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003238:	464b      	mov	r3, r9
 800323a:	eb45 0303 	adc.w	r3, r5, r3
 800323e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800324e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800325e:	4629      	mov	r1, r5
 8003260:	008b      	lsls	r3, r1, #2
 8003262:	4621      	mov	r1, r4
 8003264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003268:	4621      	mov	r1, r4
 800326a:	008a      	lsls	r2, r1, #2
 800326c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003270:	f7fd f806 	bl	8000280 <__aeabi_uldivmod>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4b60      	ldr	r3, [pc, #384]	@ (80033fc <UART_SetConfig+0x4e4>)
 800327a:	fba3 2302 	umull	r2, r3, r3, r2
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	011c      	lsls	r4, r3, #4
 8003282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003286:	2200      	movs	r2, #0
 8003288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800328c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003290:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003294:	4642      	mov	r2, r8
 8003296:	464b      	mov	r3, r9
 8003298:	1891      	adds	r1, r2, r2
 800329a:	61b9      	str	r1, [r7, #24]
 800329c:	415b      	adcs	r3, r3
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a4:	4641      	mov	r1, r8
 80032a6:	1851      	adds	r1, r2, r1
 80032a8:	6139      	str	r1, [r7, #16]
 80032aa:	4649      	mov	r1, r9
 80032ac:	414b      	adcs	r3, r1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032bc:	4659      	mov	r1, fp
 80032be:	00cb      	lsls	r3, r1, #3
 80032c0:	4651      	mov	r1, sl
 80032c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c6:	4651      	mov	r1, sl
 80032c8:	00ca      	lsls	r2, r1, #3
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	4642      	mov	r2, r8
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032d8:	464b      	mov	r3, r9
 80032da:	460a      	mov	r2, r1
 80032dc:	eb42 0303 	adc.w	r3, r2, r3
 80032e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032fc:	4649      	mov	r1, r9
 80032fe:	008b      	lsls	r3, r1, #2
 8003300:	4641      	mov	r1, r8
 8003302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003306:	4641      	mov	r1, r8
 8003308:	008a      	lsls	r2, r1, #2
 800330a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800330e:	f7fc ffb7 	bl	8000280 <__aeabi_uldivmod>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4611      	mov	r1, r2
 8003318:	4b38      	ldr	r3, [pc, #224]	@ (80033fc <UART_SetConfig+0x4e4>)
 800331a:	fba3 2301 	umull	r2, r3, r3, r1
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2264      	movs	r2, #100	@ 0x64
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	1acb      	subs	r3, r1, r3
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	3332      	adds	r3, #50	@ 0x32
 800332c:	4a33      	ldr	r2, [pc, #204]	@ (80033fc <UART_SetConfig+0x4e4>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003338:	441c      	add	r4, r3
 800333a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800333e:	2200      	movs	r2, #0
 8003340:	673b      	str	r3, [r7, #112]	@ 0x70
 8003342:	677a      	str	r2, [r7, #116]	@ 0x74
 8003344:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003348:	4642      	mov	r2, r8
 800334a:	464b      	mov	r3, r9
 800334c:	1891      	adds	r1, r2, r2
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	415b      	adcs	r3, r3
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003358:	4641      	mov	r1, r8
 800335a:	1851      	adds	r1, r2, r1
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	4649      	mov	r1, r9
 8003360:	414b      	adcs	r3, r1
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003370:	4659      	mov	r1, fp
 8003372:	00cb      	lsls	r3, r1, #3
 8003374:	4651      	mov	r1, sl
 8003376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800337a:	4651      	mov	r1, sl
 800337c:	00ca      	lsls	r2, r1, #3
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	4603      	mov	r3, r0
 8003384:	4642      	mov	r2, r8
 8003386:	189b      	adds	r3, r3, r2
 8003388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800338a:	464b      	mov	r3, r9
 800338c:	460a      	mov	r2, r1
 800338e:	eb42 0303 	adc.w	r3, r2, r3
 8003392:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	663b      	str	r3, [r7, #96]	@ 0x60
 800339e:	667a      	str	r2, [r7, #100]	@ 0x64
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80033ac:	4649      	mov	r1, r9
 80033ae:	008b      	lsls	r3, r1, #2
 80033b0:	4641      	mov	r1, r8
 80033b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033b6:	4641      	mov	r1, r8
 80033b8:	008a      	lsls	r2, r1, #2
 80033ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80033be:	f7fc ff5f 	bl	8000280 <__aeabi_uldivmod>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4b0d      	ldr	r3, [pc, #52]	@ (80033fc <UART_SetConfig+0x4e4>)
 80033c8:	fba3 1302 	umull	r1, r3, r3, r2
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	2164      	movs	r1, #100	@ 0x64
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	3332      	adds	r3, #50	@ 0x32
 80033da:	4a08      	ldr	r2, [pc, #32]	@ (80033fc <UART_SetConfig+0x4e4>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	f003 020f 	and.w	r2, r3, #15
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4422      	add	r2, r4
 80033ee:	609a      	str	r2, [r3, #8]
}
 80033f0:	bf00      	nop
 80033f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033f6:	46bd      	mov	sp, r7
 80033f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033fc:	51eb851f 	.word	0x51eb851f

08003400 <std>:
 8003400:	2300      	movs	r3, #0
 8003402:	b510      	push	{r4, lr}
 8003404:	4604      	mov	r4, r0
 8003406:	e9c0 3300 	strd	r3, r3, [r0]
 800340a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800340e:	6083      	str	r3, [r0, #8]
 8003410:	8181      	strh	r1, [r0, #12]
 8003412:	6643      	str	r3, [r0, #100]	@ 0x64
 8003414:	81c2      	strh	r2, [r0, #14]
 8003416:	6183      	str	r3, [r0, #24]
 8003418:	4619      	mov	r1, r3
 800341a:	2208      	movs	r2, #8
 800341c:	305c      	adds	r0, #92	@ 0x5c
 800341e:	f000 f9f9 	bl	8003814 <memset>
 8003422:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <std+0x58>)
 8003424:	6263      	str	r3, [r4, #36]	@ 0x24
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <std+0x5c>)
 8003428:	62a3      	str	r3, [r4, #40]	@ 0x28
 800342a:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <std+0x60>)
 800342c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <std+0x64>)
 8003430:	6323      	str	r3, [r4, #48]	@ 0x30
 8003432:	4b0d      	ldr	r3, [pc, #52]	@ (8003468 <std+0x68>)
 8003434:	6224      	str	r4, [r4, #32]
 8003436:	429c      	cmp	r4, r3
 8003438:	d006      	beq.n	8003448 <std+0x48>
 800343a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800343e:	4294      	cmp	r4, r2
 8003440:	d002      	beq.n	8003448 <std+0x48>
 8003442:	33d0      	adds	r3, #208	@ 0xd0
 8003444:	429c      	cmp	r4, r3
 8003446:	d105      	bne.n	8003454 <std+0x54>
 8003448:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800344c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003450:	f000 ba58 	b.w	8003904 <__retarget_lock_init_recursive>
 8003454:	bd10      	pop	{r4, pc}
 8003456:	bf00      	nop
 8003458:	08003665 	.word	0x08003665
 800345c:	08003687 	.word	0x08003687
 8003460:	080036bf 	.word	0x080036bf
 8003464:	080036e3 	.word	0x080036e3
 8003468:	20000164 	.word	0x20000164

0800346c <stdio_exit_handler>:
 800346c:	4a02      	ldr	r2, [pc, #8]	@ (8003478 <stdio_exit_handler+0xc>)
 800346e:	4903      	ldr	r1, [pc, #12]	@ (800347c <stdio_exit_handler+0x10>)
 8003470:	4803      	ldr	r0, [pc, #12]	@ (8003480 <stdio_exit_handler+0x14>)
 8003472:	f000 b869 	b.w	8003548 <_fwalk_sglue>
 8003476:	bf00      	nop
 8003478:	2000000c 	.word	0x2000000c
 800347c:	080041c1 	.word	0x080041c1
 8003480:	2000001c 	.word	0x2000001c

08003484 <cleanup_stdio>:
 8003484:	6841      	ldr	r1, [r0, #4]
 8003486:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <cleanup_stdio+0x34>)
 8003488:	4299      	cmp	r1, r3
 800348a:	b510      	push	{r4, lr}
 800348c:	4604      	mov	r4, r0
 800348e:	d001      	beq.n	8003494 <cleanup_stdio+0x10>
 8003490:	f000 fe96 	bl	80041c0 <_fflush_r>
 8003494:	68a1      	ldr	r1, [r4, #8]
 8003496:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <cleanup_stdio+0x38>)
 8003498:	4299      	cmp	r1, r3
 800349a:	d002      	beq.n	80034a2 <cleanup_stdio+0x1e>
 800349c:	4620      	mov	r0, r4
 800349e:	f000 fe8f 	bl	80041c0 <_fflush_r>
 80034a2:	68e1      	ldr	r1, [r4, #12]
 80034a4:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <cleanup_stdio+0x3c>)
 80034a6:	4299      	cmp	r1, r3
 80034a8:	d004      	beq.n	80034b4 <cleanup_stdio+0x30>
 80034aa:	4620      	mov	r0, r4
 80034ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034b0:	f000 be86 	b.w	80041c0 <_fflush_r>
 80034b4:	bd10      	pop	{r4, pc}
 80034b6:	bf00      	nop
 80034b8:	20000164 	.word	0x20000164
 80034bc:	200001cc 	.word	0x200001cc
 80034c0:	20000234 	.word	0x20000234

080034c4 <global_stdio_init.part.0>:
 80034c4:	b510      	push	{r4, lr}
 80034c6:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <global_stdio_init.part.0+0x30>)
 80034c8:	4c0b      	ldr	r4, [pc, #44]	@ (80034f8 <global_stdio_init.part.0+0x34>)
 80034ca:	4a0c      	ldr	r2, [pc, #48]	@ (80034fc <global_stdio_init.part.0+0x38>)
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	4620      	mov	r0, r4
 80034d0:	2200      	movs	r2, #0
 80034d2:	2104      	movs	r1, #4
 80034d4:	f7ff ff94 	bl	8003400 <std>
 80034d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80034dc:	2201      	movs	r2, #1
 80034de:	2109      	movs	r1, #9
 80034e0:	f7ff ff8e 	bl	8003400 <std>
 80034e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80034e8:	2202      	movs	r2, #2
 80034ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ee:	2112      	movs	r1, #18
 80034f0:	f7ff bf86 	b.w	8003400 <std>
 80034f4:	2000029c 	.word	0x2000029c
 80034f8:	20000164 	.word	0x20000164
 80034fc:	0800346d 	.word	0x0800346d

08003500 <__sfp_lock_acquire>:
 8003500:	4801      	ldr	r0, [pc, #4]	@ (8003508 <__sfp_lock_acquire+0x8>)
 8003502:	f000 ba00 	b.w	8003906 <__retarget_lock_acquire_recursive>
 8003506:	bf00      	nop
 8003508:	200002a5 	.word	0x200002a5

0800350c <__sfp_lock_release>:
 800350c:	4801      	ldr	r0, [pc, #4]	@ (8003514 <__sfp_lock_release+0x8>)
 800350e:	f000 b9fb 	b.w	8003908 <__retarget_lock_release_recursive>
 8003512:	bf00      	nop
 8003514:	200002a5 	.word	0x200002a5

08003518 <__sinit>:
 8003518:	b510      	push	{r4, lr}
 800351a:	4604      	mov	r4, r0
 800351c:	f7ff fff0 	bl	8003500 <__sfp_lock_acquire>
 8003520:	6a23      	ldr	r3, [r4, #32]
 8003522:	b11b      	cbz	r3, 800352c <__sinit+0x14>
 8003524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003528:	f7ff bff0 	b.w	800350c <__sfp_lock_release>
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <__sinit+0x28>)
 800352e:	6223      	str	r3, [r4, #32]
 8003530:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <__sinit+0x2c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f5      	bne.n	8003524 <__sinit+0xc>
 8003538:	f7ff ffc4 	bl	80034c4 <global_stdio_init.part.0>
 800353c:	e7f2      	b.n	8003524 <__sinit+0xc>
 800353e:	bf00      	nop
 8003540:	08003485 	.word	0x08003485
 8003544:	2000029c 	.word	0x2000029c

08003548 <_fwalk_sglue>:
 8003548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800354c:	4607      	mov	r7, r0
 800354e:	4688      	mov	r8, r1
 8003550:	4614      	mov	r4, r2
 8003552:	2600      	movs	r6, #0
 8003554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003558:	f1b9 0901 	subs.w	r9, r9, #1
 800355c:	d505      	bpl.n	800356a <_fwalk_sglue+0x22>
 800355e:	6824      	ldr	r4, [r4, #0]
 8003560:	2c00      	cmp	r4, #0
 8003562:	d1f7      	bne.n	8003554 <_fwalk_sglue+0xc>
 8003564:	4630      	mov	r0, r6
 8003566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800356a:	89ab      	ldrh	r3, [r5, #12]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d907      	bls.n	8003580 <_fwalk_sglue+0x38>
 8003570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003574:	3301      	adds	r3, #1
 8003576:	d003      	beq.n	8003580 <_fwalk_sglue+0x38>
 8003578:	4629      	mov	r1, r5
 800357a:	4638      	mov	r0, r7
 800357c:	47c0      	blx	r8
 800357e:	4306      	orrs	r6, r0
 8003580:	3568      	adds	r5, #104	@ 0x68
 8003582:	e7e9      	b.n	8003558 <_fwalk_sglue+0x10>

08003584 <iprintf>:
 8003584:	b40f      	push	{r0, r1, r2, r3}
 8003586:	b507      	push	{r0, r1, r2, lr}
 8003588:	4906      	ldr	r1, [pc, #24]	@ (80035a4 <iprintf+0x20>)
 800358a:	ab04      	add	r3, sp, #16
 800358c:	6808      	ldr	r0, [r1, #0]
 800358e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003592:	6881      	ldr	r1, [r0, #8]
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	f000 fae9 	bl	8003b6c <_vfiprintf_r>
 800359a:	b003      	add	sp, #12
 800359c:	f85d eb04 	ldr.w	lr, [sp], #4
 80035a0:	b004      	add	sp, #16
 80035a2:	4770      	bx	lr
 80035a4:	20000018 	.word	0x20000018

080035a8 <_puts_r>:
 80035a8:	6a03      	ldr	r3, [r0, #32]
 80035aa:	b570      	push	{r4, r5, r6, lr}
 80035ac:	6884      	ldr	r4, [r0, #8]
 80035ae:	4605      	mov	r5, r0
 80035b0:	460e      	mov	r6, r1
 80035b2:	b90b      	cbnz	r3, 80035b8 <_puts_r+0x10>
 80035b4:	f7ff ffb0 	bl	8003518 <__sinit>
 80035b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035ba:	07db      	lsls	r3, r3, #31
 80035bc:	d405      	bmi.n	80035ca <_puts_r+0x22>
 80035be:	89a3      	ldrh	r3, [r4, #12]
 80035c0:	0598      	lsls	r0, r3, #22
 80035c2:	d402      	bmi.n	80035ca <_puts_r+0x22>
 80035c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035c6:	f000 f99e 	bl	8003906 <__retarget_lock_acquire_recursive>
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	0719      	lsls	r1, r3, #28
 80035ce:	d502      	bpl.n	80035d6 <_puts_r+0x2e>
 80035d0:	6923      	ldr	r3, [r4, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d135      	bne.n	8003642 <_puts_r+0x9a>
 80035d6:	4621      	mov	r1, r4
 80035d8:	4628      	mov	r0, r5
 80035da:	f000 f8c5 	bl	8003768 <__swsetup_r>
 80035de:	b380      	cbz	r0, 8003642 <_puts_r+0x9a>
 80035e0:	f04f 35ff 	mov.w	r5, #4294967295
 80035e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035e6:	07da      	lsls	r2, r3, #31
 80035e8:	d405      	bmi.n	80035f6 <_puts_r+0x4e>
 80035ea:	89a3      	ldrh	r3, [r4, #12]
 80035ec:	059b      	lsls	r3, r3, #22
 80035ee:	d402      	bmi.n	80035f6 <_puts_r+0x4e>
 80035f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035f2:	f000 f989 	bl	8003908 <__retarget_lock_release_recursive>
 80035f6:	4628      	mov	r0, r5
 80035f8:	bd70      	pop	{r4, r5, r6, pc}
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	da04      	bge.n	8003608 <_puts_r+0x60>
 80035fe:	69a2      	ldr	r2, [r4, #24]
 8003600:	429a      	cmp	r2, r3
 8003602:	dc17      	bgt.n	8003634 <_puts_r+0x8c>
 8003604:	290a      	cmp	r1, #10
 8003606:	d015      	beq.n	8003634 <_puts_r+0x8c>
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	6022      	str	r2, [r4, #0]
 800360e:	7019      	strb	r1, [r3, #0]
 8003610:	68a3      	ldr	r3, [r4, #8]
 8003612:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003616:	3b01      	subs	r3, #1
 8003618:	60a3      	str	r3, [r4, #8]
 800361a:	2900      	cmp	r1, #0
 800361c:	d1ed      	bne.n	80035fa <_puts_r+0x52>
 800361e:	2b00      	cmp	r3, #0
 8003620:	da11      	bge.n	8003646 <_puts_r+0x9e>
 8003622:	4622      	mov	r2, r4
 8003624:	210a      	movs	r1, #10
 8003626:	4628      	mov	r0, r5
 8003628:	f000 f85f 	bl	80036ea <__swbuf_r>
 800362c:	3001      	adds	r0, #1
 800362e:	d0d7      	beq.n	80035e0 <_puts_r+0x38>
 8003630:	250a      	movs	r5, #10
 8003632:	e7d7      	b.n	80035e4 <_puts_r+0x3c>
 8003634:	4622      	mov	r2, r4
 8003636:	4628      	mov	r0, r5
 8003638:	f000 f857 	bl	80036ea <__swbuf_r>
 800363c:	3001      	adds	r0, #1
 800363e:	d1e7      	bne.n	8003610 <_puts_r+0x68>
 8003640:	e7ce      	b.n	80035e0 <_puts_r+0x38>
 8003642:	3e01      	subs	r6, #1
 8003644:	e7e4      	b.n	8003610 <_puts_r+0x68>
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	6022      	str	r2, [r4, #0]
 800364c:	220a      	movs	r2, #10
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e7ee      	b.n	8003630 <_puts_r+0x88>
	...

08003654 <puts>:
 8003654:	4b02      	ldr	r3, [pc, #8]	@ (8003660 <puts+0xc>)
 8003656:	4601      	mov	r1, r0
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	f7ff bfa5 	b.w	80035a8 <_puts_r>
 800365e:	bf00      	nop
 8003660:	20000018 	.word	0x20000018

08003664 <__sread>:
 8003664:	b510      	push	{r4, lr}
 8003666:	460c      	mov	r4, r1
 8003668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800366c:	f000 f8fc 	bl	8003868 <_read_r>
 8003670:	2800      	cmp	r0, #0
 8003672:	bfab      	itete	ge
 8003674:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003676:	89a3      	ldrhlt	r3, [r4, #12]
 8003678:	181b      	addge	r3, r3, r0
 800367a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800367e:	bfac      	ite	ge
 8003680:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003682:	81a3      	strhlt	r3, [r4, #12]
 8003684:	bd10      	pop	{r4, pc}

08003686 <__swrite>:
 8003686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800368a:	461f      	mov	r7, r3
 800368c:	898b      	ldrh	r3, [r1, #12]
 800368e:	05db      	lsls	r3, r3, #23
 8003690:	4605      	mov	r5, r0
 8003692:	460c      	mov	r4, r1
 8003694:	4616      	mov	r6, r2
 8003696:	d505      	bpl.n	80036a4 <__swrite+0x1e>
 8003698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369c:	2302      	movs	r3, #2
 800369e:	2200      	movs	r2, #0
 80036a0:	f000 f8d0 	bl	8003844 <_lseek_r>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	4632      	mov	r2, r6
 80036b2:	463b      	mov	r3, r7
 80036b4:	4628      	mov	r0, r5
 80036b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ba:	f000 b8e7 	b.w	800388c <_write_r>

080036be <__sseek>:
 80036be:	b510      	push	{r4, lr}
 80036c0:	460c      	mov	r4, r1
 80036c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c6:	f000 f8bd 	bl	8003844 <_lseek_r>
 80036ca:	1c43      	adds	r3, r0, #1
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	bf15      	itete	ne
 80036d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80036d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80036d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80036da:	81a3      	strheq	r3, [r4, #12]
 80036dc:	bf18      	it	ne
 80036de:	81a3      	strhne	r3, [r4, #12]
 80036e0:	bd10      	pop	{r4, pc}

080036e2 <__sclose>:
 80036e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e6:	f000 b89d 	b.w	8003824 <_close_r>

080036ea <__swbuf_r>:
 80036ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ec:	460e      	mov	r6, r1
 80036ee:	4614      	mov	r4, r2
 80036f0:	4605      	mov	r5, r0
 80036f2:	b118      	cbz	r0, 80036fc <__swbuf_r+0x12>
 80036f4:	6a03      	ldr	r3, [r0, #32]
 80036f6:	b90b      	cbnz	r3, 80036fc <__swbuf_r+0x12>
 80036f8:	f7ff ff0e 	bl	8003518 <__sinit>
 80036fc:	69a3      	ldr	r3, [r4, #24]
 80036fe:	60a3      	str	r3, [r4, #8]
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	071a      	lsls	r2, r3, #28
 8003704:	d501      	bpl.n	800370a <__swbuf_r+0x20>
 8003706:	6923      	ldr	r3, [r4, #16]
 8003708:	b943      	cbnz	r3, 800371c <__swbuf_r+0x32>
 800370a:	4621      	mov	r1, r4
 800370c:	4628      	mov	r0, r5
 800370e:	f000 f82b 	bl	8003768 <__swsetup_r>
 8003712:	b118      	cbz	r0, 800371c <__swbuf_r+0x32>
 8003714:	f04f 37ff 	mov.w	r7, #4294967295
 8003718:	4638      	mov	r0, r7
 800371a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	6922      	ldr	r2, [r4, #16]
 8003720:	1a98      	subs	r0, r3, r2
 8003722:	6963      	ldr	r3, [r4, #20]
 8003724:	b2f6      	uxtb	r6, r6
 8003726:	4283      	cmp	r3, r0
 8003728:	4637      	mov	r7, r6
 800372a:	dc05      	bgt.n	8003738 <__swbuf_r+0x4e>
 800372c:	4621      	mov	r1, r4
 800372e:	4628      	mov	r0, r5
 8003730:	f000 fd46 	bl	80041c0 <_fflush_r>
 8003734:	2800      	cmp	r0, #0
 8003736:	d1ed      	bne.n	8003714 <__swbuf_r+0x2a>
 8003738:	68a3      	ldr	r3, [r4, #8]
 800373a:	3b01      	subs	r3, #1
 800373c:	60a3      	str	r3, [r4, #8]
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	6022      	str	r2, [r4, #0]
 8003744:	701e      	strb	r6, [r3, #0]
 8003746:	6962      	ldr	r2, [r4, #20]
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	429a      	cmp	r2, r3
 800374c:	d004      	beq.n	8003758 <__swbuf_r+0x6e>
 800374e:	89a3      	ldrh	r3, [r4, #12]
 8003750:	07db      	lsls	r3, r3, #31
 8003752:	d5e1      	bpl.n	8003718 <__swbuf_r+0x2e>
 8003754:	2e0a      	cmp	r6, #10
 8003756:	d1df      	bne.n	8003718 <__swbuf_r+0x2e>
 8003758:	4621      	mov	r1, r4
 800375a:	4628      	mov	r0, r5
 800375c:	f000 fd30 	bl	80041c0 <_fflush_r>
 8003760:	2800      	cmp	r0, #0
 8003762:	d0d9      	beq.n	8003718 <__swbuf_r+0x2e>
 8003764:	e7d6      	b.n	8003714 <__swbuf_r+0x2a>
	...

08003768 <__swsetup_r>:
 8003768:	b538      	push	{r3, r4, r5, lr}
 800376a:	4b29      	ldr	r3, [pc, #164]	@ (8003810 <__swsetup_r+0xa8>)
 800376c:	4605      	mov	r5, r0
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	460c      	mov	r4, r1
 8003772:	b118      	cbz	r0, 800377c <__swsetup_r+0x14>
 8003774:	6a03      	ldr	r3, [r0, #32]
 8003776:	b90b      	cbnz	r3, 800377c <__swsetup_r+0x14>
 8003778:	f7ff fece 	bl	8003518 <__sinit>
 800377c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003780:	0719      	lsls	r1, r3, #28
 8003782:	d422      	bmi.n	80037ca <__swsetup_r+0x62>
 8003784:	06da      	lsls	r2, r3, #27
 8003786:	d407      	bmi.n	8003798 <__swsetup_r+0x30>
 8003788:	2209      	movs	r2, #9
 800378a:	602a      	str	r2, [r5, #0]
 800378c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003790:	81a3      	strh	r3, [r4, #12]
 8003792:	f04f 30ff 	mov.w	r0, #4294967295
 8003796:	e033      	b.n	8003800 <__swsetup_r+0x98>
 8003798:	0758      	lsls	r0, r3, #29
 800379a:	d512      	bpl.n	80037c2 <__swsetup_r+0x5a>
 800379c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800379e:	b141      	cbz	r1, 80037b2 <__swsetup_r+0x4a>
 80037a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037a4:	4299      	cmp	r1, r3
 80037a6:	d002      	beq.n	80037ae <__swsetup_r+0x46>
 80037a8:	4628      	mov	r0, r5
 80037aa:	f000 f8bd 	bl	8003928 <_free_r>
 80037ae:	2300      	movs	r3, #0
 80037b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	2300      	movs	r3, #0
 80037bc:	6063      	str	r3, [r4, #4]
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	f043 0308 	orr.w	r3, r3, #8
 80037c8:	81a3      	strh	r3, [r4, #12]
 80037ca:	6923      	ldr	r3, [r4, #16]
 80037cc:	b94b      	cbnz	r3, 80037e2 <__swsetup_r+0x7a>
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037d8:	d003      	beq.n	80037e2 <__swsetup_r+0x7a>
 80037da:	4621      	mov	r1, r4
 80037dc:	4628      	mov	r0, r5
 80037de:	f000 fd3d 	bl	800425c <__smakebuf_r>
 80037e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037e6:	f013 0201 	ands.w	r2, r3, #1
 80037ea:	d00a      	beq.n	8003802 <__swsetup_r+0x9a>
 80037ec:	2200      	movs	r2, #0
 80037ee:	60a2      	str	r2, [r4, #8]
 80037f0:	6962      	ldr	r2, [r4, #20]
 80037f2:	4252      	negs	r2, r2
 80037f4:	61a2      	str	r2, [r4, #24]
 80037f6:	6922      	ldr	r2, [r4, #16]
 80037f8:	b942      	cbnz	r2, 800380c <__swsetup_r+0xa4>
 80037fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80037fe:	d1c5      	bne.n	800378c <__swsetup_r+0x24>
 8003800:	bd38      	pop	{r3, r4, r5, pc}
 8003802:	0799      	lsls	r1, r3, #30
 8003804:	bf58      	it	pl
 8003806:	6962      	ldrpl	r2, [r4, #20]
 8003808:	60a2      	str	r2, [r4, #8]
 800380a:	e7f4      	b.n	80037f6 <__swsetup_r+0x8e>
 800380c:	2000      	movs	r0, #0
 800380e:	e7f7      	b.n	8003800 <__swsetup_r+0x98>
 8003810:	20000018 	.word	0x20000018

08003814 <memset>:
 8003814:	4402      	add	r2, r0
 8003816:	4603      	mov	r3, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <_close_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4d06      	ldr	r5, [pc, #24]	@ (8003840 <_close_r+0x1c>)
 8003828:	2300      	movs	r3, #0
 800382a:	4604      	mov	r4, r0
 800382c:	4608      	mov	r0, r1
 800382e:	602b      	str	r3, [r5, #0]
 8003830:	f7fd faf0 	bl	8000e14 <_close>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	d102      	bne.n	800383e <_close_r+0x1a>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	b103      	cbz	r3, 800383e <_close_r+0x1a>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	200002a0 	.word	0x200002a0

08003844 <_lseek_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4d07      	ldr	r5, [pc, #28]	@ (8003864 <_lseek_r+0x20>)
 8003848:	4604      	mov	r4, r0
 800384a:	4608      	mov	r0, r1
 800384c:	4611      	mov	r1, r2
 800384e:	2200      	movs	r2, #0
 8003850:	602a      	str	r2, [r5, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	f7fd fb05 	bl	8000e62 <_lseek>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_lseek_r+0x1e>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_lseek_r+0x1e>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	200002a0 	.word	0x200002a0

08003868 <_read_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4d07      	ldr	r5, [pc, #28]	@ (8003888 <_read_r+0x20>)
 800386c:	4604      	mov	r4, r0
 800386e:	4608      	mov	r0, r1
 8003870:	4611      	mov	r1, r2
 8003872:	2200      	movs	r2, #0
 8003874:	602a      	str	r2, [r5, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	f7fd fa93 	bl	8000da2 <_read>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d102      	bne.n	8003886 <_read_r+0x1e>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	b103      	cbz	r3, 8003886 <_read_r+0x1e>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	200002a0 	.word	0x200002a0

0800388c <_write_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4d07      	ldr	r5, [pc, #28]	@ (80038ac <_write_r+0x20>)
 8003890:	4604      	mov	r4, r0
 8003892:	4608      	mov	r0, r1
 8003894:	4611      	mov	r1, r2
 8003896:	2200      	movs	r2, #0
 8003898:	602a      	str	r2, [r5, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	f7fd fa9e 	bl	8000ddc <_write>
 80038a0:	1c43      	adds	r3, r0, #1
 80038a2:	d102      	bne.n	80038aa <_write_r+0x1e>
 80038a4:	682b      	ldr	r3, [r5, #0]
 80038a6:	b103      	cbz	r3, 80038aa <_write_r+0x1e>
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	bd38      	pop	{r3, r4, r5, pc}
 80038ac:	200002a0 	.word	0x200002a0

080038b0 <__errno>:
 80038b0:	4b01      	ldr	r3, [pc, #4]	@ (80038b8 <__errno+0x8>)
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000018 	.word	0x20000018

080038bc <__libc_init_array>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4d0d      	ldr	r5, [pc, #52]	@ (80038f4 <__libc_init_array+0x38>)
 80038c0:	4c0d      	ldr	r4, [pc, #52]	@ (80038f8 <__libc_init_array+0x3c>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	2600      	movs	r6, #0
 80038c8:	42a6      	cmp	r6, r4
 80038ca:	d109      	bne.n	80038e0 <__libc_init_array+0x24>
 80038cc:	4d0b      	ldr	r5, [pc, #44]	@ (80038fc <__libc_init_array+0x40>)
 80038ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003900 <__libc_init_array+0x44>)
 80038d0:	f000 fd32 	bl	8004338 <_init>
 80038d4:	1b64      	subs	r4, r4, r5
 80038d6:	10a4      	asrs	r4, r4, #2
 80038d8:	2600      	movs	r6, #0
 80038da:	42a6      	cmp	r6, r4
 80038dc:	d105      	bne.n	80038ea <__libc_init_array+0x2e>
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e4:	4798      	blx	r3
 80038e6:	3601      	adds	r6, #1
 80038e8:	e7ee      	b.n	80038c8 <__libc_init_array+0xc>
 80038ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ee:	4798      	blx	r3
 80038f0:	3601      	adds	r6, #1
 80038f2:	e7f2      	b.n	80038da <__libc_init_array+0x1e>
 80038f4:	080044c4 	.word	0x080044c4
 80038f8:	080044c4 	.word	0x080044c4
 80038fc:	080044c4 	.word	0x080044c4
 8003900:	080044c8 	.word	0x080044c8

08003904 <__retarget_lock_init_recursive>:
 8003904:	4770      	bx	lr

08003906 <__retarget_lock_acquire_recursive>:
 8003906:	4770      	bx	lr

08003908 <__retarget_lock_release_recursive>:
 8003908:	4770      	bx	lr

0800390a <memcpy>:
 800390a:	440a      	add	r2, r1
 800390c:	4291      	cmp	r1, r2
 800390e:	f100 33ff 	add.w	r3, r0, #4294967295
 8003912:	d100      	bne.n	8003916 <memcpy+0xc>
 8003914:	4770      	bx	lr
 8003916:	b510      	push	{r4, lr}
 8003918:	f811 4b01 	ldrb.w	r4, [r1], #1
 800391c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003920:	4291      	cmp	r1, r2
 8003922:	d1f9      	bne.n	8003918 <memcpy+0xe>
 8003924:	bd10      	pop	{r4, pc}
	...

08003928 <_free_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4605      	mov	r5, r0
 800392c:	2900      	cmp	r1, #0
 800392e:	d041      	beq.n	80039b4 <_free_r+0x8c>
 8003930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003934:	1f0c      	subs	r4, r1, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	bfb8      	it	lt
 800393a:	18e4      	addlt	r4, r4, r3
 800393c:	f000 f8e0 	bl	8003b00 <__malloc_lock>
 8003940:	4a1d      	ldr	r2, [pc, #116]	@ (80039b8 <_free_r+0x90>)
 8003942:	6813      	ldr	r3, [r2, #0]
 8003944:	b933      	cbnz	r3, 8003954 <_free_r+0x2c>
 8003946:	6063      	str	r3, [r4, #4]
 8003948:	6014      	str	r4, [r2, #0]
 800394a:	4628      	mov	r0, r5
 800394c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003950:	f000 b8dc 	b.w	8003b0c <__malloc_unlock>
 8003954:	42a3      	cmp	r3, r4
 8003956:	d908      	bls.n	800396a <_free_r+0x42>
 8003958:	6820      	ldr	r0, [r4, #0]
 800395a:	1821      	adds	r1, r4, r0
 800395c:	428b      	cmp	r3, r1
 800395e:	bf01      	itttt	eq
 8003960:	6819      	ldreq	r1, [r3, #0]
 8003962:	685b      	ldreq	r3, [r3, #4]
 8003964:	1809      	addeq	r1, r1, r0
 8003966:	6021      	streq	r1, [r4, #0]
 8003968:	e7ed      	b.n	8003946 <_free_r+0x1e>
 800396a:	461a      	mov	r2, r3
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	b10b      	cbz	r3, 8003974 <_free_r+0x4c>
 8003970:	42a3      	cmp	r3, r4
 8003972:	d9fa      	bls.n	800396a <_free_r+0x42>
 8003974:	6811      	ldr	r1, [r2, #0]
 8003976:	1850      	adds	r0, r2, r1
 8003978:	42a0      	cmp	r0, r4
 800397a:	d10b      	bne.n	8003994 <_free_r+0x6c>
 800397c:	6820      	ldr	r0, [r4, #0]
 800397e:	4401      	add	r1, r0
 8003980:	1850      	adds	r0, r2, r1
 8003982:	4283      	cmp	r3, r0
 8003984:	6011      	str	r1, [r2, #0]
 8003986:	d1e0      	bne.n	800394a <_free_r+0x22>
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	6053      	str	r3, [r2, #4]
 800398e:	4408      	add	r0, r1
 8003990:	6010      	str	r0, [r2, #0]
 8003992:	e7da      	b.n	800394a <_free_r+0x22>
 8003994:	d902      	bls.n	800399c <_free_r+0x74>
 8003996:	230c      	movs	r3, #12
 8003998:	602b      	str	r3, [r5, #0]
 800399a:	e7d6      	b.n	800394a <_free_r+0x22>
 800399c:	6820      	ldr	r0, [r4, #0]
 800399e:	1821      	adds	r1, r4, r0
 80039a0:	428b      	cmp	r3, r1
 80039a2:	bf04      	itt	eq
 80039a4:	6819      	ldreq	r1, [r3, #0]
 80039a6:	685b      	ldreq	r3, [r3, #4]
 80039a8:	6063      	str	r3, [r4, #4]
 80039aa:	bf04      	itt	eq
 80039ac:	1809      	addeq	r1, r1, r0
 80039ae:	6021      	streq	r1, [r4, #0]
 80039b0:	6054      	str	r4, [r2, #4]
 80039b2:	e7ca      	b.n	800394a <_free_r+0x22>
 80039b4:	bd38      	pop	{r3, r4, r5, pc}
 80039b6:	bf00      	nop
 80039b8:	200002ac 	.word	0x200002ac

080039bc <sbrk_aligned>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4e0f      	ldr	r6, [pc, #60]	@ (80039fc <sbrk_aligned+0x40>)
 80039c0:	460c      	mov	r4, r1
 80039c2:	6831      	ldr	r1, [r6, #0]
 80039c4:	4605      	mov	r5, r0
 80039c6:	b911      	cbnz	r1, 80039ce <sbrk_aligned+0x12>
 80039c8:	f000 fca6 	bl	8004318 <_sbrk_r>
 80039cc:	6030      	str	r0, [r6, #0]
 80039ce:	4621      	mov	r1, r4
 80039d0:	4628      	mov	r0, r5
 80039d2:	f000 fca1 	bl	8004318 <_sbrk_r>
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	d103      	bne.n	80039e2 <sbrk_aligned+0x26>
 80039da:	f04f 34ff 	mov.w	r4, #4294967295
 80039de:	4620      	mov	r0, r4
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
 80039e2:	1cc4      	adds	r4, r0, #3
 80039e4:	f024 0403 	bic.w	r4, r4, #3
 80039e8:	42a0      	cmp	r0, r4
 80039ea:	d0f8      	beq.n	80039de <sbrk_aligned+0x22>
 80039ec:	1a21      	subs	r1, r4, r0
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 fc92 	bl	8004318 <_sbrk_r>
 80039f4:	3001      	adds	r0, #1
 80039f6:	d1f2      	bne.n	80039de <sbrk_aligned+0x22>
 80039f8:	e7ef      	b.n	80039da <sbrk_aligned+0x1e>
 80039fa:	bf00      	nop
 80039fc:	200002a8 	.word	0x200002a8

08003a00 <_malloc_r>:
 8003a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a04:	1ccd      	adds	r5, r1, #3
 8003a06:	f025 0503 	bic.w	r5, r5, #3
 8003a0a:	3508      	adds	r5, #8
 8003a0c:	2d0c      	cmp	r5, #12
 8003a0e:	bf38      	it	cc
 8003a10:	250c      	movcc	r5, #12
 8003a12:	2d00      	cmp	r5, #0
 8003a14:	4606      	mov	r6, r0
 8003a16:	db01      	blt.n	8003a1c <_malloc_r+0x1c>
 8003a18:	42a9      	cmp	r1, r5
 8003a1a:	d904      	bls.n	8003a26 <_malloc_r+0x26>
 8003a1c:	230c      	movs	r3, #12
 8003a1e:	6033      	str	r3, [r6, #0]
 8003a20:	2000      	movs	r0, #0
 8003a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003afc <_malloc_r+0xfc>
 8003a2a:	f000 f869 	bl	8003b00 <__malloc_lock>
 8003a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a32:	461c      	mov	r4, r3
 8003a34:	bb44      	cbnz	r4, 8003a88 <_malloc_r+0x88>
 8003a36:	4629      	mov	r1, r5
 8003a38:	4630      	mov	r0, r6
 8003a3a:	f7ff ffbf 	bl	80039bc <sbrk_aligned>
 8003a3e:	1c43      	adds	r3, r0, #1
 8003a40:	4604      	mov	r4, r0
 8003a42:	d158      	bne.n	8003af6 <_malloc_r+0xf6>
 8003a44:	f8d8 4000 	ldr.w	r4, [r8]
 8003a48:	4627      	mov	r7, r4
 8003a4a:	2f00      	cmp	r7, #0
 8003a4c:	d143      	bne.n	8003ad6 <_malloc_r+0xd6>
 8003a4e:	2c00      	cmp	r4, #0
 8003a50:	d04b      	beq.n	8003aea <_malloc_r+0xea>
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	4639      	mov	r1, r7
 8003a56:	4630      	mov	r0, r6
 8003a58:	eb04 0903 	add.w	r9, r4, r3
 8003a5c:	f000 fc5c 	bl	8004318 <_sbrk_r>
 8003a60:	4581      	cmp	r9, r0
 8003a62:	d142      	bne.n	8003aea <_malloc_r+0xea>
 8003a64:	6821      	ldr	r1, [r4, #0]
 8003a66:	1a6d      	subs	r5, r5, r1
 8003a68:	4629      	mov	r1, r5
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	f7ff ffa6 	bl	80039bc <sbrk_aligned>
 8003a70:	3001      	adds	r0, #1
 8003a72:	d03a      	beq.n	8003aea <_malloc_r+0xea>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	442b      	add	r3, r5
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	bb62      	cbnz	r2, 8003adc <_malloc_r+0xdc>
 8003a82:	f8c8 7000 	str.w	r7, [r8]
 8003a86:	e00f      	b.n	8003aa8 <_malloc_r+0xa8>
 8003a88:	6822      	ldr	r2, [r4, #0]
 8003a8a:	1b52      	subs	r2, r2, r5
 8003a8c:	d420      	bmi.n	8003ad0 <_malloc_r+0xd0>
 8003a8e:	2a0b      	cmp	r2, #11
 8003a90:	d917      	bls.n	8003ac2 <_malloc_r+0xc2>
 8003a92:	1961      	adds	r1, r4, r5
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	6025      	str	r5, [r4, #0]
 8003a98:	bf18      	it	ne
 8003a9a:	6059      	strne	r1, [r3, #4]
 8003a9c:	6863      	ldr	r3, [r4, #4]
 8003a9e:	bf08      	it	eq
 8003aa0:	f8c8 1000 	streq.w	r1, [r8]
 8003aa4:	5162      	str	r2, [r4, r5]
 8003aa6:	604b      	str	r3, [r1, #4]
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 f82f 	bl	8003b0c <__malloc_unlock>
 8003aae:	f104 000b 	add.w	r0, r4, #11
 8003ab2:	1d23      	adds	r3, r4, #4
 8003ab4:	f020 0007 	bic.w	r0, r0, #7
 8003ab8:	1ac2      	subs	r2, r0, r3
 8003aba:	bf1c      	itt	ne
 8003abc:	1a1b      	subne	r3, r3, r0
 8003abe:	50a3      	strne	r3, [r4, r2]
 8003ac0:	e7af      	b.n	8003a22 <_malloc_r+0x22>
 8003ac2:	6862      	ldr	r2, [r4, #4]
 8003ac4:	42a3      	cmp	r3, r4
 8003ac6:	bf0c      	ite	eq
 8003ac8:	f8c8 2000 	streq.w	r2, [r8]
 8003acc:	605a      	strne	r2, [r3, #4]
 8003ace:	e7eb      	b.n	8003aa8 <_malloc_r+0xa8>
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	6864      	ldr	r4, [r4, #4]
 8003ad4:	e7ae      	b.n	8003a34 <_malloc_r+0x34>
 8003ad6:	463c      	mov	r4, r7
 8003ad8:	687f      	ldr	r7, [r7, #4]
 8003ada:	e7b6      	b.n	8003a4a <_malloc_r+0x4a>
 8003adc:	461a      	mov	r2, r3
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	42a3      	cmp	r3, r4
 8003ae2:	d1fb      	bne.n	8003adc <_malloc_r+0xdc>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	6053      	str	r3, [r2, #4]
 8003ae8:	e7de      	b.n	8003aa8 <_malloc_r+0xa8>
 8003aea:	230c      	movs	r3, #12
 8003aec:	6033      	str	r3, [r6, #0]
 8003aee:	4630      	mov	r0, r6
 8003af0:	f000 f80c 	bl	8003b0c <__malloc_unlock>
 8003af4:	e794      	b.n	8003a20 <_malloc_r+0x20>
 8003af6:	6005      	str	r5, [r0, #0]
 8003af8:	e7d6      	b.n	8003aa8 <_malloc_r+0xa8>
 8003afa:	bf00      	nop
 8003afc:	200002ac 	.word	0x200002ac

08003b00 <__malloc_lock>:
 8003b00:	4801      	ldr	r0, [pc, #4]	@ (8003b08 <__malloc_lock+0x8>)
 8003b02:	f7ff bf00 	b.w	8003906 <__retarget_lock_acquire_recursive>
 8003b06:	bf00      	nop
 8003b08:	200002a4 	.word	0x200002a4

08003b0c <__malloc_unlock>:
 8003b0c:	4801      	ldr	r0, [pc, #4]	@ (8003b14 <__malloc_unlock+0x8>)
 8003b0e:	f7ff befb 	b.w	8003908 <__retarget_lock_release_recursive>
 8003b12:	bf00      	nop
 8003b14:	200002a4 	.word	0x200002a4

08003b18 <__sfputc_r>:
 8003b18:	6893      	ldr	r3, [r2, #8]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	b410      	push	{r4}
 8003b20:	6093      	str	r3, [r2, #8]
 8003b22:	da08      	bge.n	8003b36 <__sfputc_r+0x1e>
 8003b24:	6994      	ldr	r4, [r2, #24]
 8003b26:	42a3      	cmp	r3, r4
 8003b28:	db01      	blt.n	8003b2e <__sfputc_r+0x16>
 8003b2a:	290a      	cmp	r1, #10
 8003b2c:	d103      	bne.n	8003b36 <__sfputc_r+0x1e>
 8003b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b32:	f7ff bdda 	b.w	80036ea <__swbuf_r>
 8003b36:	6813      	ldr	r3, [r2, #0]
 8003b38:	1c58      	adds	r0, r3, #1
 8003b3a:	6010      	str	r0, [r2, #0]
 8003b3c:	7019      	strb	r1, [r3, #0]
 8003b3e:	4608      	mov	r0, r1
 8003b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <__sfputs_r>:
 8003b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b48:	4606      	mov	r6, r0
 8003b4a:	460f      	mov	r7, r1
 8003b4c:	4614      	mov	r4, r2
 8003b4e:	18d5      	adds	r5, r2, r3
 8003b50:	42ac      	cmp	r4, r5
 8003b52:	d101      	bne.n	8003b58 <__sfputs_r+0x12>
 8003b54:	2000      	movs	r0, #0
 8003b56:	e007      	b.n	8003b68 <__sfputs_r+0x22>
 8003b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b5c:	463a      	mov	r2, r7
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f7ff ffda 	bl	8003b18 <__sfputc_r>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	d1f3      	bne.n	8003b50 <__sfputs_r+0xa>
 8003b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b6c <_vfiprintf_r>:
 8003b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b70:	460d      	mov	r5, r1
 8003b72:	b09d      	sub	sp, #116	@ 0x74
 8003b74:	4614      	mov	r4, r2
 8003b76:	4698      	mov	r8, r3
 8003b78:	4606      	mov	r6, r0
 8003b7a:	b118      	cbz	r0, 8003b84 <_vfiprintf_r+0x18>
 8003b7c:	6a03      	ldr	r3, [r0, #32]
 8003b7e:	b90b      	cbnz	r3, 8003b84 <_vfiprintf_r+0x18>
 8003b80:	f7ff fcca 	bl	8003518 <__sinit>
 8003b84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b86:	07d9      	lsls	r1, r3, #31
 8003b88:	d405      	bmi.n	8003b96 <_vfiprintf_r+0x2a>
 8003b8a:	89ab      	ldrh	r3, [r5, #12]
 8003b8c:	059a      	lsls	r2, r3, #22
 8003b8e:	d402      	bmi.n	8003b96 <_vfiprintf_r+0x2a>
 8003b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b92:	f7ff feb8 	bl	8003906 <__retarget_lock_acquire_recursive>
 8003b96:	89ab      	ldrh	r3, [r5, #12]
 8003b98:	071b      	lsls	r3, r3, #28
 8003b9a:	d501      	bpl.n	8003ba0 <_vfiprintf_r+0x34>
 8003b9c:	692b      	ldr	r3, [r5, #16]
 8003b9e:	b99b      	cbnz	r3, 8003bc8 <_vfiprintf_r+0x5c>
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	f7ff fde0 	bl	8003768 <__swsetup_r>
 8003ba8:	b170      	cbz	r0, 8003bc8 <_vfiprintf_r+0x5c>
 8003baa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bac:	07dc      	lsls	r4, r3, #31
 8003bae:	d504      	bpl.n	8003bba <_vfiprintf_r+0x4e>
 8003bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb4:	b01d      	add	sp, #116	@ 0x74
 8003bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bba:	89ab      	ldrh	r3, [r5, #12]
 8003bbc:	0598      	lsls	r0, r3, #22
 8003bbe:	d4f7      	bmi.n	8003bb0 <_vfiprintf_r+0x44>
 8003bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bc2:	f7ff fea1 	bl	8003908 <__retarget_lock_release_recursive>
 8003bc6:	e7f3      	b.n	8003bb0 <_vfiprintf_r+0x44>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bcc:	2320      	movs	r3, #32
 8003bce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bd6:	2330      	movs	r3, #48	@ 0x30
 8003bd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003d88 <_vfiprintf_r+0x21c>
 8003bdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003be0:	f04f 0901 	mov.w	r9, #1
 8003be4:	4623      	mov	r3, r4
 8003be6:	469a      	mov	sl, r3
 8003be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bec:	b10a      	cbz	r2, 8003bf2 <_vfiprintf_r+0x86>
 8003bee:	2a25      	cmp	r2, #37	@ 0x25
 8003bf0:	d1f9      	bne.n	8003be6 <_vfiprintf_r+0x7a>
 8003bf2:	ebba 0b04 	subs.w	fp, sl, r4
 8003bf6:	d00b      	beq.n	8003c10 <_vfiprintf_r+0xa4>
 8003bf8:	465b      	mov	r3, fp
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4630      	mov	r0, r6
 8003c00:	f7ff ffa1 	bl	8003b46 <__sfputs_r>
 8003c04:	3001      	adds	r0, #1
 8003c06:	f000 80a7 	beq.w	8003d58 <_vfiprintf_r+0x1ec>
 8003c0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c0c:	445a      	add	r2, fp
 8003c0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c10:	f89a 3000 	ldrb.w	r3, [sl]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 809f 	beq.w	8003d58 <_vfiprintf_r+0x1ec>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c24:	f10a 0a01 	add.w	sl, sl, #1
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	9307      	str	r3, [sp, #28]
 8003c2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c30:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c32:	4654      	mov	r4, sl
 8003c34:	2205      	movs	r2, #5
 8003c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c3a:	4853      	ldr	r0, [pc, #332]	@ (8003d88 <_vfiprintf_r+0x21c>)
 8003c3c:	f7fc fad0 	bl	80001e0 <memchr>
 8003c40:	9a04      	ldr	r2, [sp, #16]
 8003c42:	b9d8      	cbnz	r0, 8003c7c <_vfiprintf_r+0x110>
 8003c44:	06d1      	lsls	r1, r2, #27
 8003c46:	bf44      	itt	mi
 8003c48:	2320      	movmi	r3, #32
 8003c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c4e:	0713      	lsls	r3, r2, #28
 8003c50:	bf44      	itt	mi
 8003c52:	232b      	movmi	r3, #43	@ 0x2b
 8003c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c58:	f89a 3000 	ldrb.w	r3, [sl]
 8003c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c5e:	d015      	beq.n	8003c8c <_vfiprintf_r+0x120>
 8003c60:	9a07      	ldr	r2, [sp, #28]
 8003c62:	4654      	mov	r4, sl
 8003c64:	2000      	movs	r0, #0
 8003c66:	f04f 0c0a 	mov.w	ip, #10
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c70:	3b30      	subs	r3, #48	@ 0x30
 8003c72:	2b09      	cmp	r3, #9
 8003c74:	d94b      	bls.n	8003d0e <_vfiprintf_r+0x1a2>
 8003c76:	b1b0      	cbz	r0, 8003ca6 <_vfiprintf_r+0x13a>
 8003c78:	9207      	str	r2, [sp, #28]
 8003c7a:	e014      	b.n	8003ca6 <_vfiprintf_r+0x13a>
 8003c7c:	eba0 0308 	sub.w	r3, r0, r8
 8003c80:	fa09 f303 	lsl.w	r3, r9, r3
 8003c84:	4313      	orrs	r3, r2
 8003c86:	9304      	str	r3, [sp, #16]
 8003c88:	46a2      	mov	sl, r4
 8003c8a:	e7d2      	b.n	8003c32 <_vfiprintf_r+0xc6>
 8003c8c:	9b03      	ldr	r3, [sp, #12]
 8003c8e:	1d19      	adds	r1, r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	9103      	str	r1, [sp, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bfbb      	ittet	lt
 8003c98:	425b      	neglt	r3, r3
 8003c9a:	f042 0202 	orrlt.w	r2, r2, #2
 8003c9e:	9307      	strge	r3, [sp, #28]
 8003ca0:	9307      	strlt	r3, [sp, #28]
 8003ca2:	bfb8      	it	lt
 8003ca4:	9204      	strlt	r2, [sp, #16]
 8003ca6:	7823      	ldrb	r3, [r4, #0]
 8003ca8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003caa:	d10a      	bne.n	8003cc2 <_vfiprintf_r+0x156>
 8003cac:	7863      	ldrb	r3, [r4, #1]
 8003cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cb0:	d132      	bne.n	8003d18 <_vfiprintf_r+0x1ac>
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	1d1a      	adds	r2, r3, #4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	9203      	str	r2, [sp, #12]
 8003cba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cbe:	3402      	adds	r4, #2
 8003cc0:	9305      	str	r3, [sp, #20]
 8003cc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003d98 <_vfiprintf_r+0x22c>
 8003cc6:	7821      	ldrb	r1, [r4, #0]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	4650      	mov	r0, sl
 8003ccc:	f7fc fa88 	bl	80001e0 <memchr>
 8003cd0:	b138      	cbz	r0, 8003ce2 <_vfiprintf_r+0x176>
 8003cd2:	9b04      	ldr	r3, [sp, #16]
 8003cd4:	eba0 000a 	sub.w	r0, r0, sl
 8003cd8:	2240      	movs	r2, #64	@ 0x40
 8003cda:	4082      	lsls	r2, r0
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	3401      	adds	r4, #1
 8003ce0:	9304      	str	r3, [sp, #16]
 8003ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ce6:	4829      	ldr	r0, [pc, #164]	@ (8003d8c <_vfiprintf_r+0x220>)
 8003ce8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003cec:	2206      	movs	r2, #6
 8003cee:	f7fc fa77 	bl	80001e0 <memchr>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d03f      	beq.n	8003d76 <_vfiprintf_r+0x20a>
 8003cf6:	4b26      	ldr	r3, [pc, #152]	@ (8003d90 <_vfiprintf_r+0x224>)
 8003cf8:	bb1b      	cbnz	r3, 8003d42 <_vfiprintf_r+0x1d6>
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	3307      	adds	r3, #7
 8003cfe:	f023 0307 	bic.w	r3, r3, #7
 8003d02:	3308      	adds	r3, #8
 8003d04:	9303      	str	r3, [sp, #12]
 8003d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d08:	443b      	add	r3, r7
 8003d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d0c:	e76a      	b.n	8003be4 <_vfiprintf_r+0x78>
 8003d0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d12:	460c      	mov	r4, r1
 8003d14:	2001      	movs	r0, #1
 8003d16:	e7a8      	b.n	8003c6a <_vfiprintf_r+0xfe>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	3401      	adds	r4, #1
 8003d1c:	9305      	str	r3, [sp, #20]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f04f 0c0a 	mov.w	ip, #10
 8003d24:	4620      	mov	r0, r4
 8003d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d2a:	3a30      	subs	r2, #48	@ 0x30
 8003d2c:	2a09      	cmp	r2, #9
 8003d2e:	d903      	bls.n	8003d38 <_vfiprintf_r+0x1cc>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0c6      	beq.n	8003cc2 <_vfiprintf_r+0x156>
 8003d34:	9105      	str	r1, [sp, #20]
 8003d36:	e7c4      	b.n	8003cc2 <_vfiprintf_r+0x156>
 8003d38:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e7f0      	b.n	8003d24 <_vfiprintf_r+0x1b8>
 8003d42:	ab03      	add	r3, sp, #12
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	462a      	mov	r2, r5
 8003d48:	4b12      	ldr	r3, [pc, #72]	@ (8003d94 <_vfiprintf_r+0x228>)
 8003d4a:	a904      	add	r1, sp, #16
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	f3af 8000 	nop.w
 8003d52:	4607      	mov	r7, r0
 8003d54:	1c78      	adds	r0, r7, #1
 8003d56:	d1d6      	bne.n	8003d06 <_vfiprintf_r+0x19a>
 8003d58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d5a:	07d9      	lsls	r1, r3, #31
 8003d5c:	d405      	bmi.n	8003d6a <_vfiprintf_r+0x1fe>
 8003d5e:	89ab      	ldrh	r3, [r5, #12]
 8003d60:	059a      	lsls	r2, r3, #22
 8003d62:	d402      	bmi.n	8003d6a <_vfiprintf_r+0x1fe>
 8003d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d66:	f7ff fdcf 	bl	8003908 <__retarget_lock_release_recursive>
 8003d6a:	89ab      	ldrh	r3, [r5, #12]
 8003d6c:	065b      	lsls	r3, r3, #25
 8003d6e:	f53f af1f 	bmi.w	8003bb0 <_vfiprintf_r+0x44>
 8003d72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d74:	e71e      	b.n	8003bb4 <_vfiprintf_r+0x48>
 8003d76:	ab03      	add	r3, sp, #12
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	462a      	mov	r2, r5
 8003d7c:	4b05      	ldr	r3, [pc, #20]	@ (8003d94 <_vfiprintf_r+0x228>)
 8003d7e:	a904      	add	r1, sp, #16
 8003d80:	4630      	mov	r0, r6
 8003d82:	f000 f879 	bl	8003e78 <_printf_i>
 8003d86:	e7e4      	b.n	8003d52 <_vfiprintf_r+0x1e6>
 8003d88:	08004488 	.word	0x08004488
 8003d8c:	08004492 	.word	0x08004492
 8003d90:	00000000 	.word	0x00000000
 8003d94:	08003b47 	.word	0x08003b47
 8003d98:	0800448e 	.word	0x0800448e

08003d9c <_printf_common>:
 8003d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da0:	4616      	mov	r6, r2
 8003da2:	4698      	mov	r8, r3
 8003da4:	688a      	ldr	r2, [r1, #8]
 8003da6:	690b      	ldr	r3, [r1, #16]
 8003da8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dac:	4293      	cmp	r3, r2
 8003dae:	bfb8      	it	lt
 8003db0:	4613      	movlt	r3, r2
 8003db2:	6033      	str	r3, [r6, #0]
 8003db4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003db8:	4607      	mov	r7, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	b10a      	cbz	r2, 8003dc2 <_printf_common+0x26>
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	0699      	lsls	r1, r3, #26
 8003dc6:	bf42      	ittt	mi
 8003dc8:	6833      	ldrmi	r3, [r6, #0]
 8003dca:	3302      	addmi	r3, #2
 8003dcc:	6033      	strmi	r3, [r6, #0]
 8003dce:	6825      	ldr	r5, [r4, #0]
 8003dd0:	f015 0506 	ands.w	r5, r5, #6
 8003dd4:	d106      	bne.n	8003de4 <_printf_common+0x48>
 8003dd6:	f104 0a19 	add.w	sl, r4, #25
 8003dda:	68e3      	ldr	r3, [r4, #12]
 8003ddc:	6832      	ldr	r2, [r6, #0]
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	42ab      	cmp	r3, r5
 8003de2:	dc26      	bgt.n	8003e32 <_printf_common+0x96>
 8003de4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003de8:	6822      	ldr	r2, [r4, #0]
 8003dea:	3b00      	subs	r3, #0
 8003dec:	bf18      	it	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	0692      	lsls	r2, r2, #26
 8003df2:	d42b      	bmi.n	8003e4c <_printf_common+0xb0>
 8003df4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003df8:	4641      	mov	r1, r8
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	47c8      	blx	r9
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d01e      	beq.n	8003e40 <_printf_common+0xa4>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	6922      	ldr	r2, [r4, #16]
 8003e06:	f003 0306 	and.w	r3, r3, #6
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	bf02      	ittt	eq
 8003e0e:	68e5      	ldreq	r5, [r4, #12]
 8003e10:	6833      	ldreq	r3, [r6, #0]
 8003e12:	1aed      	subeq	r5, r5, r3
 8003e14:	68a3      	ldr	r3, [r4, #8]
 8003e16:	bf0c      	ite	eq
 8003e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e1c:	2500      	movne	r5, #0
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	bfc4      	itt	gt
 8003e22:	1a9b      	subgt	r3, r3, r2
 8003e24:	18ed      	addgt	r5, r5, r3
 8003e26:	2600      	movs	r6, #0
 8003e28:	341a      	adds	r4, #26
 8003e2a:	42b5      	cmp	r5, r6
 8003e2c:	d11a      	bne.n	8003e64 <_printf_common+0xc8>
 8003e2e:	2000      	movs	r0, #0
 8003e30:	e008      	b.n	8003e44 <_printf_common+0xa8>
 8003e32:	2301      	movs	r3, #1
 8003e34:	4652      	mov	r2, sl
 8003e36:	4641      	mov	r1, r8
 8003e38:	4638      	mov	r0, r7
 8003e3a:	47c8      	blx	r9
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d103      	bne.n	8003e48 <_printf_common+0xac>
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295
 8003e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e48:	3501      	adds	r5, #1
 8003e4a:	e7c6      	b.n	8003dda <_printf_common+0x3e>
 8003e4c:	18e1      	adds	r1, r4, r3
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	2030      	movs	r0, #48	@ 0x30
 8003e52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e56:	4422      	add	r2, r4
 8003e58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e60:	3302      	adds	r3, #2
 8003e62:	e7c7      	b.n	8003df4 <_printf_common+0x58>
 8003e64:	2301      	movs	r3, #1
 8003e66:	4622      	mov	r2, r4
 8003e68:	4641      	mov	r1, r8
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	47c8      	blx	r9
 8003e6e:	3001      	adds	r0, #1
 8003e70:	d0e6      	beq.n	8003e40 <_printf_common+0xa4>
 8003e72:	3601      	adds	r6, #1
 8003e74:	e7d9      	b.n	8003e2a <_printf_common+0x8e>
	...

08003e78 <_printf_i>:
 8003e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e7c:	7e0f      	ldrb	r7, [r1, #24]
 8003e7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e80:	2f78      	cmp	r7, #120	@ 0x78
 8003e82:	4691      	mov	r9, r2
 8003e84:	4680      	mov	r8, r0
 8003e86:	460c      	mov	r4, r1
 8003e88:	469a      	mov	sl, r3
 8003e8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e8e:	d807      	bhi.n	8003ea0 <_printf_i+0x28>
 8003e90:	2f62      	cmp	r7, #98	@ 0x62
 8003e92:	d80a      	bhi.n	8003eaa <_printf_i+0x32>
 8003e94:	2f00      	cmp	r7, #0
 8003e96:	f000 80d2 	beq.w	800403e <_printf_i+0x1c6>
 8003e9a:	2f58      	cmp	r7, #88	@ 0x58
 8003e9c:	f000 80b9 	beq.w	8004012 <_printf_i+0x19a>
 8003ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ea8:	e03a      	b.n	8003f20 <_printf_i+0xa8>
 8003eaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003eae:	2b15      	cmp	r3, #21
 8003eb0:	d8f6      	bhi.n	8003ea0 <_printf_i+0x28>
 8003eb2:	a101      	add	r1, pc, #4	@ (adr r1, 8003eb8 <_printf_i+0x40>)
 8003eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eb8:	08003f11 	.word	0x08003f11
 8003ebc:	08003f25 	.word	0x08003f25
 8003ec0:	08003ea1 	.word	0x08003ea1
 8003ec4:	08003ea1 	.word	0x08003ea1
 8003ec8:	08003ea1 	.word	0x08003ea1
 8003ecc:	08003ea1 	.word	0x08003ea1
 8003ed0:	08003f25 	.word	0x08003f25
 8003ed4:	08003ea1 	.word	0x08003ea1
 8003ed8:	08003ea1 	.word	0x08003ea1
 8003edc:	08003ea1 	.word	0x08003ea1
 8003ee0:	08003ea1 	.word	0x08003ea1
 8003ee4:	08004025 	.word	0x08004025
 8003ee8:	08003f4f 	.word	0x08003f4f
 8003eec:	08003fdf 	.word	0x08003fdf
 8003ef0:	08003ea1 	.word	0x08003ea1
 8003ef4:	08003ea1 	.word	0x08003ea1
 8003ef8:	08004047 	.word	0x08004047
 8003efc:	08003ea1 	.word	0x08003ea1
 8003f00:	08003f4f 	.word	0x08003f4f
 8003f04:	08003ea1 	.word	0x08003ea1
 8003f08:	08003ea1 	.word	0x08003ea1
 8003f0c:	08003fe7 	.word	0x08003fe7
 8003f10:	6833      	ldr	r3, [r6, #0]
 8003f12:	1d1a      	adds	r2, r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6032      	str	r2, [r6, #0]
 8003f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f20:	2301      	movs	r3, #1
 8003f22:	e09d      	b.n	8004060 <_printf_i+0x1e8>
 8003f24:	6833      	ldr	r3, [r6, #0]
 8003f26:	6820      	ldr	r0, [r4, #0]
 8003f28:	1d19      	adds	r1, r3, #4
 8003f2a:	6031      	str	r1, [r6, #0]
 8003f2c:	0606      	lsls	r6, r0, #24
 8003f2e:	d501      	bpl.n	8003f34 <_printf_i+0xbc>
 8003f30:	681d      	ldr	r5, [r3, #0]
 8003f32:	e003      	b.n	8003f3c <_printf_i+0xc4>
 8003f34:	0645      	lsls	r5, r0, #25
 8003f36:	d5fb      	bpl.n	8003f30 <_printf_i+0xb8>
 8003f38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f3c:	2d00      	cmp	r5, #0
 8003f3e:	da03      	bge.n	8003f48 <_printf_i+0xd0>
 8003f40:	232d      	movs	r3, #45	@ 0x2d
 8003f42:	426d      	negs	r5, r5
 8003f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f48:	4859      	ldr	r0, [pc, #356]	@ (80040b0 <_printf_i+0x238>)
 8003f4a:	230a      	movs	r3, #10
 8003f4c:	e011      	b.n	8003f72 <_printf_i+0xfa>
 8003f4e:	6821      	ldr	r1, [r4, #0]
 8003f50:	6833      	ldr	r3, [r6, #0]
 8003f52:	0608      	lsls	r0, r1, #24
 8003f54:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f58:	d402      	bmi.n	8003f60 <_printf_i+0xe8>
 8003f5a:	0649      	lsls	r1, r1, #25
 8003f5c:	bf48      	it	mi
 8003f5e:	b2ad      	uxthmi	r5, r5
 8003f60:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f62:	4853      	ldr	r0, [pc, #332]	@ (80040b0 <_printf_i+0x238>)
 8003f64:	6033      	str	r3, [r6, #0]
 8003f66:	bf14      	ite	ne
 8003f68:	230a      	movne	r3, #10
 8003f6a:	2308      	moveq	r3, #8
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f72:	6866      	ldr	r6, [r4, #4]
 8003f74:	60a6      	str	r6, [r4, #8]
 8003f76:	2e00      	cmp	r6, #0
 8003f78:	bfa2      	ittt	ge
 8003f7a:	6821      	ldrge	r1, [r4, #0]
 8003f7c:	f021 0104 	bicge.w	r1, r1, #4
 8003f80:	6021      	strge	r1, [r4, #0]
 8003f82:	b90d      	cbnz	r5, 8003f88 <_printf_i+0x110>
 8003f84:	2e00      	cmp	r6, #0
 8003f86:	d04b      	beq.n	8004020 <_printf_i+0x1a8>
 8003f88:	4616      	mov	r6, r2
 8003f8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f8e:	fb03 5711 	mls	r7, r3, r1, r5
 8003f92:	5dc7      	ldrb	r7, [r0, r7]
 8003f94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f98:	462f      	mov	r7, r5
 8003f9a:	42bb      	cmp	r3, r7
 8003f9c:	460d      	mov	r5, r1
 8003f9e:	d9f4      	bls.n	8003f8a <_printf_i+0x112>
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d10b      	bne.n	8003fbc <_printf_i+0x144>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	07df      	lsls	r7, r3, #31
 8003fa8:	d508      	bpl.n	8003fbc <_printf_i+0x144>
 8003faa:	6923      	ldr	r3, [r4, #16]
 8003fac:	6861      	ldr	r1, [r4, #4]
 8003fae:	4299      	cmp	r1, r3
 8003fb0:	bfde      	ittt	le
 8003fb2:	2330      	movle	r3, #48	@ 0x30
 8003fb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fbc:	1b92      	subs	r2, r2, r6
 8003fbe:	6122      	str	r2, [r4, #16]
 8003fc0:	f8cd a000 	str.w	sl, [sp]
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	aa03      	add	r2, sp, #12
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4640      	mov	r0, r8
 8003fcc:	f7ff fee6 	bl	8003d9c <_printf_common>
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d14a      	bne.n	800406a <_printf_i+0x1f2>
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	b004      	add	sp, #16
 8003fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	f043 0320 	orr.w	r3, r3, #32
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	4833      	ldr	r0, [pc, #204]	@ (80040b4 <_printf_i+0x23c>)
 8003fe8:	2778      	movs	r7, #120	@ 0x78
 8003fea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	6831      	ldr	r1, [r6, #0]
 8003ff2:	061f      	lsls	r7, r3, #24
 8003ff4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ff8:	d402      	bmi.n	8004000 <_printf_i+0x188>
 8003ffa:	065f      	lsls	r7, r3, #25
 8003ffc:	bf48      	it	mi
 8003ffe:	b2ad      	uxthmi	r5, r5
 8004000:	6031      	str	r1, [r6, #0]
 8004002:	07d9      	lsls	r1, r3, #31
 8004004:	bf44      	itt	mi
 8004006:	f043 0320 	orrmi.w	r3, r3, #32
 800400a:	6023      	strmi	r3, [r4, #0]
 800400c:	b11d      	cbz	r5, 8004016 <_printf_i+0x19e>
 800400e:	2310      	movs	r3, #16
 8004010:	e7ac      	b.n	8003f6c <_printf_i+0xf4>
 8004012:	4827      	ldr	r0, [pc, #156]	@ (80040b0 <_printf_i+0x238>)
 8004014:	e7e9      	b.n	8003fea <_printf_i+0x172>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	f023 0320 	bic.w	r3, r3, #32
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	e7f6      	b.n	800400e <_printf_i+0x196>
 8004020:	4616      	mov	r6, r2
 8004022:	e7bd      	b.n	8003fa0 <_printf_i+0x128>
 8004024:	6833      	ldr	r3, [r6, #0]
 8004026:	6825      	ldr	r5, [r4, #0]
 8004028:	6961      	ldr	r1, [r4, #20]
 800402a:	1d18      	adds	r0, r3, #4
 800402c:	6030      	str	r0, [r6, #0]
 800402e:	062e      	lsls	r6, r5, #24
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	d501      	bpl.n	8004038 <_printf_i+0x1c0>
 8004034:	6019      	str	r1, [r3, #0]
 8004036:	e002      	b.n	800403e <_printf_i+0x1c6>
 8004038:	0668      	lsls	r0, r5, #25
 800403a:	d5fb      	bpl.n	8004034 <_printf_i+0x1bc>
 800403c:	8019      	strh	r1, [r3, #0]
 800403e:	2300      	movs	r3, #0
 8004040:	6123      	str	r3, [r4, #16]
 8004042:	4616      	mov	r6, r2
 8004044:	e7bc      	b.n	8003fc0 <_printf_i+0x148>
 8004046:	6833      	ldr	r3, [r6, #0]
 8004048:	1d1a      	adds	r2, r3, #4
 800404a:	6032      	str	r2, [r6, #0]
 800404c:	681e      	ldr	r6, [r3, #0]
 800404e:	6862      	ldr	r2, [r4, #4]
 8004050:	2100      	movs	r1, #0
 8004052:	4630      	mov	r0, r6
 8004054:	f7fc f8c4 	bl	80001e0 <memchr>
 8004058:	b108      	cbz	r0, 800405e <_printf_i+0x1e6>
 800405a:	1b80      	subs	r0, r0, r6
 800405c:	6060      	str	r0, [r4, #4]
 800405e:	6863      	ldr	r3, [r4, #4]
 8004060:	6123      	str	r3, [r4, #16]
 8004062:	2300      	movs	r3, #0
 8004064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004068:	e7aa      	b.n	8003fc0 <_printf_i+0x148>
 800406a:	6923      	ldr	r3, [r4, #16]
 800406c:	4632      	mov	r2, r6
 800406e:	4649      	mov	r1, r9
 8004070:	4640      	mov	r0, r8
 8004072:	47d0      	blx	sl
 8004074:	3001      	adds	r0, #1
 8004076:	d0ad      	beq.n	8003fd4 <_printf_i+0x15c>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	079b      	lsls	r3, r3, #30
 800407c:	d413      	bmi.n	80040a6 <_printf_i+0x22e>
 800407e:	68e0      	ldr	r0, [r4, #12]
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	4298      	cmp	r0, r3
 8004084:	bfb8      	it	lt
 8004086:	4618      	movlt	r0, r3
 8004088:	e7a6      	b.n	8003fd8 <_printf_i+0x160>
 800408a:	2301      	movs	r3, #1
 800408c:	4632      	mov	r2, r6
 800408e:	4649      	mov	r1, r9
 8004090:	4640      	mov	r0, r8
 8004092:	47d0      	blx	sl
 8004094:	3001      	adds	r0, #1
 8004096:	d09d      	beq.n	8003fd4 <_printf_i+0x15c>
 8004098:	3501      	adds	r5, #1
 800409a:	68e3      	ldr	r3, [r4, #12]
 800409c:	9903      	ldr	r1, [sp, #12]
 800409e:	1a5b      	subs	r3, r3, r1
 80040a0:	42ab      	cmp	r3, r5
 80040a2:	dcf2      	bgt.n	800408a <_printf_i+0x212>
 80040a4:	e7eb      	b.n	800407e <_printf_i+0x206>
 80040a6:	2500      	movs	r5, #0
 80040a8:	f104 0619 	add.w	r6, r4, #25
 80040ac:	e7f5      	b.n	800409a <_printf_i+0x222>
 80040ae:	bf00      	nop
 80040b0:	08004499 	.word	0x08004499
 80040b4:	080044aa 	.word	0x080044aa

080040b8 <__sflush_r>:
 80040b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c0:	0716      	lsls	r6, r2, #28
 80040c2:	4605      	mov	r5, r0
 80040c4:	460c      	mov	r4, r1
 80040c6:	d454      	bmi.n	8004172 <__sflush_r+0xba>
 80040c8:	684b      	ldr	r3, [r1, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	dc02      	bgt.n	80040d4 <__sflush_r+0x1c>
 80040ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	dd48      	ble.n	8004166 <__sflush_r+0xae>
 80040d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040d6:	2e00      	cmp	r6, #0
 80040d8:	d045      	beq.n	8004166 <__sflush_r+0xae>
 80040da:	2300      	movs	r3, #0
 80040dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80040e0:	682f      	ldr	r7, [r5, #0]
 80040e2:	6a21      	ldr	r1, [r4, #32]
 80040e4:	602b      	str	r3, [r5, #0]
 80040e6:	d030      	beq.n	800414a <__sflush_r+0x92>
 80040e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	0759      	lsls	r1, r3, #29
 80040ee:	d505      	bpl.n	80040fc <__sflush_r+0x44>
 80040f0:	6863      	ldr	r3, [r4, #4]
 80040f2:	1ad2      	subs	r2, r2, r3
 80040f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80040f6:	b10b      	cbz	r3, 80040fc <__sflush_r+0x44>
 80040f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040fa:	1ad2      	subs	r2, r2, r3
 80040fc:	2300      	movs	r3, #0
 80040fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004100:	6a21      	ldr	r1, [r4, #32]
 8004102:	4628      	mov	r0, r5
 8004104:	47b0      	blx	r6
 8004106:	1c43      	adds	r3, r0, #1
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	d106      	bne.n	800411a <__sflush_r+0x62>
 800410c:	6829      	ldr	r1, [r5, #0]
 800410e:	291d      	cmp	r1, #29
 8004110:	d82b      	bhi.n	800416a <__sflush_r+0xb2>
 8004112:	4a2a      	ldr	r2, [pc, #168]	@ (80041bc <__sflush_r+0x104>)
 8004114:	410a      	asrs	r2, r1
 8004116:	07d6      	lsls	r6, r2, #31
 8004118:	d427      	bmi.n	800416a <__sflush_r+0xb2>
 800411a:	2200      	movs	r2, #0
 800411c:	6062      	str	r2, [r4, #4]
 800411e:	04d9      	lsls	r1, r3, #19
 8004120:	6922      	ldr	r2, [r4, #16]
 8004122:	6022      	str	r2, [r4, #0]
 8004124:	d504      	bpl.n	8004130 <__sflush_r+0x78>
 8004126:	1c42      	adds	r2, r0, #1
 8004128:	d101      	bne.n	800412e <__sflush_r+0x76>
 800412a:	682b      	ldr	r3, [r5, #0]
 800412c:	b903      	cbnz	r3, 8004130 <__sflush_r+0x78>
 800412e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004132:	602f      	str	r7, [r5, #0]
 8004134:	b1b9      	cbz	r1, 8004166 <__sflush_r+0xae>
 8004136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800413a:	4299      	cmp	r1, r3
 800413c:	d002      	beq.n	8004144 <__sflush_r+0x8c>
 800413e:	4628      	mov	r0, r5
 8004140:	f7ff fbf2 	bl	8003928 <_free_r>
 8004144:	2300      	movs	r3, #0
 8004146:	6363      	str	r3, [r4, #52]	@ 0x34
 8004148:	e00d      	b.n	8004166 <__sflush_r+0xae>
 800414a:	2301      	movs	r3, #1
 800414c:	4628      	mov	r0, r5
 800414e:	47b0      	blx	r6
 8004150:	4602      	mov	r2, r0
 8004152:	1c50      	adds	r0, r2, #1
 8004154:	d1c9      	bne.n	80040ea <__sflush_r+0x32>
 8004156:	682b      	ldr	r3, [r5, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0c6      	beq.n	80040ea <__sflush_r+0x32>
 800415c:	2b1d      	cmp	r3, #29
 800415e:	d001      	beq.n	8004164 <__sflush_r+0xac>
 8004160:	2b16      	cmp	r3, #22
 8004162:	d11e      	bne.n	80041a2 <__sflush_r+0xea>
 8004164:	602f      	str	r7, [r5, #0]
 8004166:	2000      	movs	r0, #0
 8004168:	e022      	b.n	80041b0 <__sflush_r+0xf8>
 800416a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800416e:	b21b      	sxth	r3, r3
 8004170:	e01b      	b.n	80041aa <__sflush_r+0xf2>
 8004172:	690f      	ldr	r7, [r1, #16]
 8004174:	2f00      	cmp	r7, #0
 8004176:	d0f6      	beq.n	8004166 <__sflush_r+0xae>
 8004178:	0793      	lsls	r3, r2, #30
 800417a:	680e      	ldr	r6, [r1, #0]
 800417c:	bf08      	it	eq
 800417e:	694b      	ldreq	r3, [r1, #20]
 8004180:	600f      	str	r7, [r1, #0]
 8004182:	bf18      	it	ne
 8004184:	2300      	movne	r3, #0
 8004186:	eba6 0807 	sub.w	r8, r6, r7
 800418a:	608b      	str	r3, [r1, #8]
 800418c:	f1b8 0f00 	cmp.w	r8, #0
 8004190:	dde9      	ble.n	8004166 <__sflush_r+0xae>
 8004192:	6a21      	ldr	r1, [r4, #32]
 8004194:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004196:	4643      	mov	r3, r8
 8004198:	463a      	mov	r2, r7
 800419a:	4628      	mov	r0, r5
 800419c:	47b0      	blx	r6
 800419e:	2800      	cmp	r0, #0
 80041a0:	dc08      	bgt.n	80041b4 <__sflush_r+0xfc>
 80041a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041aa:	81a3      	strh	r3, [r4, #12]
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b4:	4407      	add	r7, r0
 80041b6:	eba8 0800 	sub.w	r8, r8, r0
 80041ba:	e7e7      	b.n	800418c <__sflush_r+0xd4>
 80041bc:	dfbffffe 	.word	0xdfbffffe

080041c0 <_fflush_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	690b      	ldr	r3, [r1, #16]
 80041c4:	4605      	mov	r5, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	b913      	cbnz	r3, 80041d0 <_fflush_r+0x10>
 80041ca:	2500      	movs	r5, #0
 80041cc:	4628      	mov	r0, r5
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
 80041d0:	b118      	cbz	r0, 80041da <_fflush_r+0x1a>
 80041d2:	6a03      	ldr	r3, [r0, #32]
 80041d4:	b90b      	cbnz	r3, 80041da <_fflush_r+0x1a>
 80041d6:	f7ff f99f 	bl	8003518 <__sinit>
 80041da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f3      	beq.n	80041ca <_fflush_r+0xa>
 80041e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80041e4:	07d0      	lsls	r0, r2, #31
 80041e6:	d404      	bmi.n	80041f2 <_fflush_r+0x32>
 80041e8:	0599      	lsls	r1, r3, #22
 80041ea:	d402      	bmi.n	80041f2 <_fflush_r+0x32>
 80041ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041ee:	f7ff fb8a 	bl	8003906 <__retarget_lock_acquire_recursive>
 80041f2:	4628      	mov	r0, r5
 80041f4:	4621      	mov	r1, r4
 80041f6:	f7ff ff5f 	bl	80040b8 <__sflush_r>
 80041fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041fc:	07da      	lsls	r2, r3, #31
 80041fe:	4605      	mov	r5, r0
 8004200:	d4e4      	bmi.n	80041cc <_fflush_r+0xc>
 8004202:	89a3      	ldrh	r3, [r4, #12]
 8004204:	059b      	lsls	r3, r3, #22
 8004206:	d4e1      	bmi.n	80041cc <_fflush_r+0xc>
 8004208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800420a:	f7ff fb7d 	bl	8003908 <__retarget_lock_release_recursive>
 800420e:	e7dd      	b.n	80041cc <_fflush_r+0xc>

08004210 <__swhatbuf_r>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	460c      	mov	r4, r1
 8004214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004218:	2900      	cmp	r1, #0
 800421a:	b096      	sub	sp, #88	@ 0x58
 800421c:	4615      	mov	r5, r2
 800421e:	461e      	mov	r6, r3
 8004220:	da0d      	bge.n	800423e <__swhatbuf_r+0x2e>
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004228:	f04f 0100 	mov.w	r1, #0
 800422c:	bf14      	ite	ne
 800422e:	2340      	movne	r3, #64	@ 0x40
 8004230:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004234:	2000      	movs	r0, #0
 8004236:	6031      	str	r1, [r6, #0]
 8004238:	602b      	str	r3, [r5, #0]
 800423a:	b016      	add	sp, #88	@ 0x58
 800423c:	bd70      	pop	{r4, r5, r6, pc}
 800423e:	466a      	mov	r2, sp
 8004240:	f000 f848 	bl	80042d4 <_fstat_r>
 8004244:	2800      	cmp	r0, #0
 8004246:	dbec      	blt.n	8004222 <__swhatbuf_r+0x12>
 8004248:	9901      	ldr	r1, [sp, #4]
 800424a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800424e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004252:	4259      	negs	r1, r3
 8004254:	4159      	adcs	r1, r3
 8004256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800425a:	e7eb      	b.n	8004234 <__swhatbuf_r+0x24>

0800425c <__smakebuf_r>:
 800425c:	898b      	ldrh	r3, [r1, #12]
 800425e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004260:	079d      	lsls	r5, r3, #30
 8004262:	4606      	mov	r6, r0
 8004264:	460c      	mov	r4, r1
 8004266:	d507      	bpl.n	8004278 <__smakebuf_r+0x1c>
 8004268:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	2301      	movs	r3, #1
 8004272:	6163      	str	r3, [r4, #20]
 8004274:	b003      	add	sp, #12
 8004276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004278:	ab01      	add	r3, sp, #4
 800427a:	466a      	mov	r2, sp
 800427c:	f7ff ffc8 	bl	8004210 <__swhatbuf_r>
 8004280:	9f00      	ldr	r7, [sp, #0]
 8004282:	4605      	mov	r5, r0
 8004284:	4639      	mov	r1, r7
 8004286:	4630      	mov	r0, r6
 8004288:	f7ff fbba 	bl	8003a00 <_malloc_r>
 800428c:	b948      	cbnz	r0, 80042a2 <__smakebuf_r+0x46>
 800428e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004292:	059a      	lsls	r2, r3, #22
 8004294:	d4ee      	bmi.n	8004274 <__smakebuf_r+0x18>
 8004296:	f023 0303 	bic.w	r3, r3, #3
 800429a:	f043 0302 	orr.w	r3, r3, #2
 800429e:	81a3      	strh	r3, [r4, #12]
 80042a0:	e7e2      	b.n	8004268 <__smakebuf_r+0xc>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	6020      	str	r0, [r4, #0]
 80042a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042aa:	81a3      	strh	r3, [r4, #12]
 80042ac:	9b01      	ldr	r3, [sp, #4]
 80042ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80042b2:	b15b      	cbz	r3, 80042cc <__smakebuf_r+0x70>
 80042b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042b8:	4630      	mov	r0, r6
 80042ba:	f000 f81d 	bl	80042f8 <_isatty_r>
 80042be:	b128      	cbz	r0, 80042cc <__smakebuf_r+0x70>
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	81a3      	strh	r3, [r4, #12]
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	431d      	orrs	r5, r3
 80042d0:	81a5      	strh	r5, [r4, #12]
 80042d2:	e7cf      	b.n	8004274 <__smakebuf_r+0x18>

080042d4 <_fstat_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	4d07      	ldr	r5, [pc, #28]	@ (80042f4 <_fstat_r+0x20>)
 80042d8:	2300      	movs	r3, #0
 80042da:	4604      	mov	r4, r0
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	602b      	str	r3, [r5, #0]
 80042e2:	f7fc fda3 	bl	8000e2c <_fstat>
 80042e6:	1c43      	adds	r3, r0, #1
 80042e8:	d102      	bne.n	80042f0 <_fstat_r+0x1c>
 80042ea:	682b      	ldr	r3, [r5, #0]
 80042ec:	b103      	cbz	r3, 80042f0 <_fstat_r+0x1c>
 80042ee:	6023      	str	r3, [r4, #0]
 80042f0:	bd38      	pop	{r3, r4, r5, pc}
 80042f2:	bf00      	nop
 80042f4:	200002a0 	.word	0x200002a0

080042f8 <_isatty_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4d06      	ldr	r5, [pc, #24]	@ (8004314 <_isatty_r+0x1c>)
 80042fc:	2300      	movs	r3, #0
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	f7fc fda2 	bl	8000e4c <_isatty>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_isatty_r+0x1a>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_isatty_r+0x1a>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	200002a0 	.word	0x200002a0

08004318 <_sbrk_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4d06      	ldr	r5, [pc, #24]	@ (8004334 <_sbrk_r+0x1c>)
 800431c:	2300      	movs	r3, #0
 800431e:	4604      	mov	r4, r0
 8004320:	4608      	mov	r0, r1
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	f7fc fdaa 	bl	8000e7c <_sbrk>
 8004328:	1c43      	adds	r3, r0, #1
 800432a:	d102      	bne.n	8004332 <_sbrk_r+0x1a>
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	b103      	cbz	r3, 8004332 <_sbrk_r+0x1a>
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	200002a0 	.word	0x200002a0

08004338 <_init>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr

08004344 <_fini>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr
